
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000279a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  0000279a  0000282e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800192  00800192  00002960  2**0
                  ALLOC
  3 .stab         000023dc  00000000  00000000  00002960  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001341  00000000  00000000  00004d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000607d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000621d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000640d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00008819  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00009b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ad68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000af28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000b21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bbe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
       6:	00 00       	nop
       8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
       a:	00 00       	nop
       c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
       e:	00 00       	nop
      10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
      12:	00 00       	nop
      14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
      16:	00 00       	nop
      18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
      1e:	00 00       	nop
      20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
      22:	00 00       	nop
      24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
      26:	00 00       	nop
      28:	c1 c7       	rjmp	.+3970   	; 0xfac <__vector_10>
      2a:	00 00       	nop
      2c:	8c c7       	rjmp	.+3864   	; 0xf46 <__vector_11>
      2e:	00 00       	nop
      30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
      32:	00 00       	nop
      34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
      36:	00 00       	nop
      38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
      3e:	00 00       	nop
      40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
      42:	00 00       	nop
      44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
      46:	00 00       	nop
      48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
      4e:	00 00       	nop
      50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <main>
      8a:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <_exit>

0000008e <__bad_interrupt>:
      8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <__fixunssfsi>:
      90:	ef 92       	push	r14
      92:	ff 92       	push	r15
      94:	0f 93       	push	r16
      96:	1f 93       	push	r17
      98:	7b 01       	movw	r14, r22
      9a:	8c 01       	movw	r16, r24
      9c:	20 e0       	ldi	r18, 0x00	; 0
      9e:	30 e0       	ldi	r19, 0x00	; 0
      a0:	40 e0       	ldi	r20, 0x00	; 0
      a2:	5f e4       	ldi	r21, 0x4F	; 79
      a4:	8c d3       	rcall	.+1816   	; 0x7be <__gesf2>
      a6:	88 23       	and	r24, r24
      a8:	7c f0       	brlt	.+30     	; 0xc8 <__fixunssfsi+0x38>
      aa:	c8 01       	movw	r24, r16
      ac:	b7 01       	movw	r22, r14
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	30 e0       	ldi	r19, 0x00	; 0
      b2:	40 e0       	ldi	r20, 0x00	; 0
      b4:	5f e4       	ldi	r21, 0x4F	; 79
      b6:	60 d1       	rcall	.+704    	; 0x378 <__subsf3>
      b8:	38 d4       	rcall	.+2160   	; 0x92a <__fixsfsi>
      ba:	9b 01       	movw	r18, r22
      bc:	ac 01       	movw	r20, r24
      be:	20 50       	subi	r18, 0x00	; 0
      c0:	30 40       	sbci	r19, 0x00	; 0
      c2:	40 40       	sbci	r20, 0x00	; 0
      c4:	50 48       	sbci	r21, 0x80	; 128
      c6:	05 c0       	rjmp	.+10     	; 0xd2 <__fixunssfsi+0x42>
      c8:	c8 01       	movw	r24, r16
      ca:	b7 01       	movw	r22, r14
      cc:	2e d4       	rcall	.+2140   	; 0x92a <__fixsfsi>
      ce:	9b 01       	movw	r18, r22
      d0:	ac 01       	movw	r20, r24
      d2:	b9 01       	movw	r22, r18
      d4:	ca 01       	movw	r24, r20
      d6:	1f 91       	pop	r17
      d8:	0f 91       	pop	r16
      da:	ff 90       	pop	r15
      dc:	ef 90       	pop	r14
      de:	08 95       	ret

000000e0 <_fpadd_parts>:
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	e6 e7       	ldi	r30, 0x76	; 118
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__prologue_saves__>
      ec:	dc 01       	movw	r26, r24
      ee:	2b 01       	movw	r4, r22
      f0:	fa 01       	movw	r30, r20
      f2:	9c 91       	ld	r25, X
      f4:	92 30       	cpi	r25, 0x02	; 2
      f6:	08 f4       	brcc	.+2      	; 0xfa <_fpadd_parts+0x1a>
      f8:	39 c1       	rjmp	.+626    	; 0x36c <_fpadd_parts+0x28c>
      fa:	eb 01       	movw	r28, r22
      fc:	88 81       	ld	r24, Y
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x24>
     102:	33 c1       	rjmp	.+614    	; 0x36a <_fpadd_parts+0x28a>
     104:	94 30       	cpi	r25, 0x04	; 4
     106:	69 f4       	brne	.+26     	; 0x122 <_fpadd_parts+0x42>
     108:	84 30       	cpi	r24, 0x04	; 4
     10a:	09 f0       	breq	.+2      	; 0x10e <_fpadd_parts+0x2e>
     10c:	2f c1       	rjmp	.+606    	; 0x36c <_fpadd_parts+0x28c>
     10e:	11 96       	adiw	r26, 0x01	; 1
     110:	9c 91       	ld	r25, X
     112:	11 97       	sbiw	r26, 0x01	; 1
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	98 17       	cp	r25, r24
     118:	09 f4       	brne	.+2      	; 0x11c <_fpadd_parts+0x3c>
     11a:	28 c1       	rjmp	.+592    	; 0x36c <_fpadd_parts+0x28c>
     11c:	a6 e8       	ldi	r26, 0x86	; 134
     11e:	b0 e0       	ldi	r27, 0x00	; 0
     120:	25 c1       	rjmp	.+586    	; 0x36c <_fpadd_parts+0x28c>
     122:	84 30       	cpi	r24, 0x04	; 4
     124:	09 f4       	brne	.+2      	; 0x128 <_fpadd_parts+0x48>
     126:	21 c1       	rjmp	.+578    	; 0x36a <_fpadd_parts+0x28a>
     128:	82 30       	cpi	r24, 0x02	; 2
     12a:	a9 f4       	brne	.+42     	; 0x156 <_fpadd_parts+0x76>
     12c:	92 30       	cpi	r25, 0x02	; 2
     12e:	09 f0       	breq	.+2      	; 0x132 <_fpadd_parts+0x52>
     130:	1d c1       	rjmp	.+570    	; 0x36c <_fpadd_parts+0x28c>
     132:	9a 01       	movw	r18, r20
     134:	ad 01       	movw	r20, r26
     136:	88 e0       	ldi	r24, 0x08	; 8
     138:	ea 01       	movw	r28, r20
     13a:	09 90       	ld	r0, Y+
     13c:	ae 01       	movw	r20, r28
     13e:	e9 01       	movw	r28, r18
     140:	09 92       	st	Y+, r0
     142:	9e 01       	movw	r18, r28
     144:	81 50       	subi	r24, 0x01	; 1
     146:	c1 f7       	brne	.-16     	; 0x138 <_fpadd_parts+0x58>
     148:	e2 01       	movw	r28, r4
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	11 96       	adiw	r26, 0x01	; 1
     14e:	9c 91       	ld	r25, X
     150:	89 23       	and	r24, r25
     152:	81 83       	std	Z+1, r24	; 0x01
     154:	08 c1       	rjmp	.+528    	; 0x366 <_fpadd_parts+0x286>
     156:	92 30       	cpi	r25, 0x02	; 2
     158:	09 f4       	brne	.+2      	; 0x15c <_fpadd_parts+0x7c>
     15a:	07 c1       	rjmp	.+526    	; 0x36a <_fpadd_parts+0x28a>
     15c:	12 96       	adiw	r26, 0x02	; 2
     15e:	2d 90       	ld	r2, X+
     160:	3c 90       	ld	r3, X
     162:	13 97       	sbiw	r26, 0x03	; 3
     164:	eb 01       	movw	r28, r22
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	9b 81       	ldd	r25, Y+3	; 0x03
     16a:	14 96       	adiw	r26, 0x04	; 4
     16c:	ad 90       	ld	r10, X+
     16e:	bd 90       	ld	r11, X+
     170:	cd 90       	ld	r12, X+
     172:	dc 90       	ld	r13, X
     174:	17 97       	sbiw	r26, 0x07	; 7
     176:	ec 80       	ldd	r14, Y+4	; 0x04
     178:	fd 80       	ldd	r15, Y+5	; 0x05
     17a:	0e 81       	ldd	r16, Y+6	; 0x06
     17c:	1f 81       	ldd	r17, Y+7	; 0x07
     17e:	91 01       	movw	r18, r2
     180:	28 1b       	sub	r18, r24
     182:	39 0b       	sbc	r19, r25
     184:	b9 01       	movw	r22, r18
     186:	37 ff       	sbrs	r19, 7
     188:	04 c0       	rjmp	.+8      	; 0x192 <_fpadd_parts+0xb2>
     18a:	66 27       	eor	r22, r22
     18c:	77 27       	eor	r23, r23
     18e:	62 1b       	sub	r22, r18
     190:	73 0b       	sbc	r23, r19
     192:	60 32       	cpi	r22, 0x20	; 32
     194:	71 05       	cpc	r23, r1
     196:	0c f0       	brlt	.+2      	; 0x19a <_fpadd_parts+0xba>
     198:	61 c0       	rjmp	.+194    	; 0x25c <_fpadd_parts+0x17c>
     19a:	12 16       	cp	r1, r18
     19c:	13 06       	cpc	r1, r19
     19e:	6c f5       	brge	.+90     	; 0x1fa <_fpadd_parts+0x11a>
     1a0:	37 01       	movw	r6, r14
     1a2:	48 01       	movw	r8, r16
     1a4:	06 2e       	mov	r0, r22
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xd0>
     1a8:	96 94       	lsr	r9
     1aa:	87 94       	ror	r8
     1ac:	77 94       	ror	r7
     1ae:	67 94       	ror	r6
     1b0:	0a 94       	dec	r0
     1b2:	d2 f7       	brpl	.-12     	; 0x1a8 <_fpadd_parts+0xc8>
     1b4:	21 e0       	ldi	r18, 0x01	; 1
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <_fpadd_parts+0xe6>
     1be:	22 0f       	add	r18, r18
     1c0:	33 1f       	adc	r19, r19
     1c2:	44 1f       	adc	r20, r20
     1c4:	55 1f       	adc	r21, r21
     1c6:	6a 95       	dec	r22
     1c8:	d2 f7       	brpl	.-12     	; 0x1be <_fpadd_parts+0xde>
     1ca:	21 50       	subi	r18, 0x01	; 1
     1cc:	30 40       	sbci	r19, 0x00	; 0
     1ce:	40 40       	sbci	r20, 0x00	; 0
     1d0:	50 40       	sbci	r21, 0x00	; 0
     1d2:	2e 21       	and	r18, r14
     1d4:	3f 21       	and	r19, r15
     1d6:	40 23       	and	r20, r16
     1d8:	51 23       	and	r21, r17
     1da:	21 15       	cp	r18, r1
     1dc:	31 05       	cpc	r19, r1
     1de:	41 05       	cpc	r20, r1
     1e0:	51 05       	cpc	r21, r1
     1e2:	21 f0       	breq	.+8      	; 0x1ec <_fpadd_parts+0x10c>
     1e4:	21 e0       	ldi	r18, 0x01	; 1
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	79 01       	movw	r14, r18
     1ee:	8a 01       	movw	r16, r20
     1f0:	e6 28       	or	r14, r6
     1f2:	f7 28       	or	r15, r7
     1f4:	08 29       	or	r16, r8
     1f6:	19 29       	or	r17, r9
     1f8:	3c c0       	rjmp	.+120    	; 0x272 <_fpadd_parts+0x192>
     1fa:	23 2b       	or	r18, r19
     1fc:	d1 f1       	breq	.+116    	; 0x272 <_fpadd_parts+0x192>
     1fe:	26 0e       	add	r2, r22
     200:	37 1e       	adc	r3, r23
     202:	35 01       	movw	r6, r10
     204:	46 01       	movw	r8, r12
     206:	06 2e       	mov	r0, r22
     208:	04 c0       	rjmp	.+8      	; 0x212 <_fpadd_parts+0x132>
     20a:	96 94       	lsr	r9
     20c:	87 94       	ror	r8
     20e:	77 94       	ror	r7
     210:	67 94       	ror	r6
     212:	0a 94       	dec	r0
     214:	d2 f7       	brpl	.-12     	; 0x20a <_fpadd_parts+0x12a>
     216:	21 e0       	ldi	r18, 0x01	; 1
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	04 c0       	rjmp	.+8      	; 0x228 <_fpadd_parts+0x148>
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	44 1f       	adc	r20, r20
     226:	55 1f       	adc	r21, r21
     228:	6a 95       	dec	r22
     22a:	d2 f7       	brpl	.-12     	; 0x220 <_fpadd_parts+0x140>
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	30 40       	sbci	r19, 0x00	; 0
     230:	40 40       	sbci	r20, 0x00	; 0
     232:	50 40       	sbci	r21, 0x00	; 0
     234:	2a 21       	and	r18, r10
     236:	3b 21       	and	r19, r11
     238:	4c 21       	and	r20, r12
     23a:	5d 21       	and	r21, r13
     23c:	21 15       	cp	r18, r1
     23e:	31 05       	cpc	r19, r1
     240:	41 05       	cpc	r20, r1
     242:	51 05       	cpc	r21, r1
     244:	21 f0       	breq	.+8      	; 0x24e <_fpadd_parts+0x16e>
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	59 01       	movw	r10, r18
     250:	6a 01       	movw	r12, r20
     252:	a6 28       	or	r10, r6
     254:	b7 28       	or	r11, r7
     256:	c8 28       	or	r12, r8
     258:	d9 28       	or	r13, r9
     25a:	0b c0       	rjmp	.+22     	; 0x272 <_fpadd_parts+0x192>
     25c:	82 15       	cp	r24, r2
     25e:	93 05       	cpc	r25, r3
     260:	2c f0       	brlt	.+10     	; 0x26c <_fpadd_parts+0x18c>
     262:	1c 01       	movw	r2, r24
     264:	aa 24       	eor	r10, r10
     266:	bb 24       	eor	r11, r11
     268:	65 01       	movw	r12, r10
     26a:	03 c0       	rjmp	.+6      	; 0x272 <_fpadd_parts+0x192>
     26c:	ee 24       	eor	r14, r14
     26e:	ff 24       	eor	r15, r15
     270:	87 01       	movw	r16, r14
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	9c 91       	ld	r25, X
     276:	d2 01       	movw	r26, r4
     278:	11 96       	adiw	r26, 0x01	; 1
     27a:	8c 91       	ld	r24, X
     27c:	98 17       	cp	r25, r24
     27e:	09 f4       	brne	.+2      	; 0x282 <_fpadd_parts+0x1a2>
     280:	45 c0       	rjmp	.+138    	; 0x30c <_fpadd_parts+0x22c>
     282:	99 23       	and	r25, r25
     284:	39 f0       	breq	.+14     	; 0x294 <_fpadd_parts+0x1b4>
     286:	a8 01       	movw	r20, r16
     288:	97 01       	movw	r18, r14
     28a:	2a 19       	sub	r18, r10
     28c:	3b 09       	sbc	r19, r11
     28e:	4c 09       	sbc	r20, r12
     290:	5d 09       	sbc	r21, r13
     292:	06 c0       	rjmp	.+12     	; 0x2a0 <_fpadd_parts+0x1c0>
     294:	a6 01       	movw	r20, r12
     296:	95 01       	movw	r18, r10
     298:	2e 19       	sub	r18, r14
     29a:	3f 09       	sbc	r19, r15
     29c:	40 0b       	sbc	r20, r16
     29e:	51 0b       	sbc	r21, r17
     2a0:	57 fd       	sbrc	r21, 7
     2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <_fpadd_parts+0x1d4>
     2a4:	11 82       	std	Z+1, r1	; 0x01
     2a6:	33 82       	std	Z+3, r3	; 0x03
     2a8:	22 82       	std	Z+2, r2	; 0x02
     2aa:	24 83       	std	Z+4, r18	; 0x04
     2ac:	35 83       	std	Z+5, r19	; 0x05
     2ae:	46 83       	std	Z+6, r20	; 0x06
     2b0:	57 83       	std	Z+7, r21	; 0x07
     2b2:	1d c0       	rjmp	.+58     	; 0x2ee <_fpadd_parts+0x20e>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	81 83       	std	Z+1, r24	; 0x01
     2b8:	33 82       	std	Z+3, r3	; 0x03
     2ba:	22 82       	std	Z+2, r2	; 0x02
     2bc:	88 27       	eor	r24, r24
     2be:	99 27       	eor	r25, r25
     2c0:	dc 01       	movw	r26, r24
     2c2:	82 1b       	sub	r24, r18
     2c4:	93 0b       	sbc	r25, r19
     2c6:	a4 0b       	sbc	r26, r20
     2c8:	b5 0b       	sbc	r27, r21
     2ca:	84 83       	std	Z+4, r24	; 0x04
     2cc:	95 83       	std	Z+5, r25	; 0x05
     2ce:	a6 83       	std	Z+6, r26	; 0x06
     2d0:	b7 83       	std	Z+7, r27	; 0x07
     2d2:	0d c0       	rjmp	.+26     	; 0x2ee <_fpadd_parts+0x20e>
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	44 1f       	adc	r20, r20
     2da:	55 1f       	adc	r21, r21
     2dc:	24 83       	std	Z+4, r18	; 0x04
     2de:	35 83       	std	Z+5, r19	; 0x05
     2e0:	46 83       	std	Z+6, r20	; 0x06
     2e2:	57 83       	std	Z+7, r21	; 0x07
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	93 81       	ldd	r25, Z+3	; 0x03
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	93 83       	std	Z+3, r25	; 0x03
     2ec:	82 83       	std	Z+2, r24	; 0x02
     2ee:	24 81       	ldd	r18, Z+4	; 0x04
     2f0:	35 81       	ldd	r19, Z+5	; 0x05
     2f2:	46 81       	ldd	r20, Z+6	; 0x06
     2f4:	57 81       	ldd	r21, Z+7	; 0x07
     2f6:	da 01       	movw	r26, r20
     2f8:	c9 01       	movw	r24, r18
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	a1 09       	sbc	r26, r1
     2fe:	b1 09       	sbc	r27, r1
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	9f 4f       	sbci	r25, 0xFF	; 255
     304:	af 4f       	sbci	r26, 0xFF	; 255
     306:	bf 43       	sbci	r27, 0x3F	; 63
     308:	28 f3       	brcs	.-54     	; 0x2d4 <_fpadd_parts+0x1f4>
     30a:	0b c0       	rjmp	.+22     	; 0x322 <_fpadd_parts+0x242>
     30c:	91 83       	std	Z+1, r25	; 0x01
     30e:	33 82       	std	Z+3, r3	; 0x03
     310:	22 82       	std	Z+2, r2	; 0x02
     312:	ea 0c       	add	r14, r10
     314:	fb 1c       	adc	r15, r11
     316:	0c 1d       	adc	r16, r12
     318:	1d 1d       	adc	r17, r13
     31a:	e4 82       	std	Z+4, r14	; 0x04
     31c:	f5 82       	std	Z+5, r15	; 0x05
     31e:	06 83       	std	Z+6, r16	; 0x06
     320:	17 83       	std	Z+7, r17	; 0x07
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	80 83       	st	Z, r24
     326:	24 81       	ldd	r18, Z+4	; 0x04
     328:	35 81       	ldd	r19, Z+5	; 0x05
     32a:	46 81       	ldd	r20, Z+6	; 0x06
     32c:	57 81       	ldd	r21, Z+7	; 0x07
     32e:	57 ff       	sbrs	r21, 7
     330:	1a c0       	rjmp	.+52     	; 0x366 <_fpadd_parts+0x286>
     332:	c9 01       	movw	r24, r18
     334:	aa 27       	eor	r26, r26
     336:	97 fd       	sbrc	r25, 7
     338:	a0 95       	com	r26
     33a:	ba 2f       	mov	r27, r26
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	90 70       	andi	r25, 0x00	; 0
     340:	a0 70       	andi	r26, 0x00	; 0
     342:	b0 70       	andi	r27, 0x00	; 0
     344:	56 95       	lsr	r21
     346:	47 95       	ror	r20
     348:	37 95       	ror	r19
     34a:	27 95       	ror	r18
     34c:	82 2b       	or	r24, r18
     34e:	93 2b       	or	r25, r19
     350:	a4 2b       	or	r26, r20
     352:	b5 2b       	or	r27, r21
     354:	84 83       	std	Z+4, r24	; 0x04
     356:	95 83       	std	Z+5, r25	; 0x05
     358:	a6 83       	std	Z+6, r26	; 0x06
     35a:	b7 83       	std	Z+7, r27	; 0x07
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	93 83       	std	Z+3, r25	; 0x03
     364:	82 83       	std	Z+2, r24	; 0x02
     366:	df 01       	movw	r26, r30
     368:	01 c0       	rjmp	.+2      	; 0x36c <_fpadd_parts+0x28c>
     36a:	d2 01       	movw	r26, r4
     36c:	cd 01       	movw	r24, r26
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	e2 e1       	ldi	r30, 0x12	; 18
     374:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__epilogue_restores__>

00000378 <__subsf3>:
     378:	a0 e2       	ldi	r26, 0x20	; 32
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	e2 ec       	ldi	r30, 0xC2	; 194
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x18>
     384:	69 83       	std	Y+1, r22	; 0x01
     386:	7a 83       	std	Y+2, r23	; 0x02
     388:	8b 83       	std	Y+3, r24	; 0x03
     38a:	9c 83       	std	Y+4, r25	; 0x04
     38c:	2d 83       	std	Y+5, r18	; 0x05
     38e:	3e 83       	std	Y+6, r19	; 0x06
     390:	4f 83       	std	Y+7, r20	; 0x07
     392:	58 87       	std	Y+8, r21	; 0x08
     394:	e9 e0       	ldi	r30, 0x09	; 9
     396:	ee 2e       	mov	r14, r30
     398:	f1 2c       	mov	r15, r1
     39a:	ec 0e       	add	r14, r28
     39c:	fd 1e       	adc	r15, r29
     39e:	ce 01       	movw	r24, r28
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	b7 01       	movw	r22, r14
     3a4:	39 d4       	rcall	.+2162   	; 0xc18 <__unpack_f>
     3a6:	8e 01       	movw	r16, r28
     3a8:	0f 5e       	subi	r16, 0xEF	; 239
     3aa:	1f 4f       	sbci	r17, 0xFF	; 255
     3ac:	ce 01       	movw	r24, r28
     3ae:	05 96       	adiw	r24, 0x05	; 5
     3b0:	b8 01       	movw	r22, r16
     3b2:	32 d4       	rcall	.+2148   	; 0xc18 <__unpack_f>
     3b4:	8a 89       	ldd	r24, Y+18	; 0x12
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	89 27       	eor	r24, r25
     3ba:	8a 8b       	std	Y+18, r24	; 0x12
     3bc:	c7 01       	movw	r24, r14
     3be:	b8 01       	movw	r22, r16
     3c0:	ae 01       	movw	r20, r28
     3c2:	47 5e       	subi	r20, 0xE7	; 231
     3c4:	5f 4f       	sbci	r21, 0xFF	; 255
     3c6:	8c de       	rcall	.-744    	; 0xe0 <_fpadd_parts>
     3c8:	52 d3       	rcall	.+1700   	; 0xa6e <__pack_f>
     3ca:	a0 96       	adiw	r28, 0x20	; 32
     3cc:	e6 e0       	ldi	r30, 0x06	; 6
     3ce:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x18>

000003d2 <__addsf3>:
     3d2:	a0 e2       	ldi	r26, 0x20	; 32
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	ef ee       	ldi	r30, 0xEF	; 239
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x18>
     3de:	69 83       	std	Y+1, r22	; 0x01
     3e0:	7a 83       	std	Y+2, r23	; 0x02
     3e2:	8b 83       	std	Y+3, r24	; 0x03
     3e4:	9c 83       	std	Y+4, r25	; 0x04
     3e6:	2d 83       	std	Y+5, r18	; 0x05
     3e8:	3e 83       	std	Y+6, r19	; 0x06
     3ea:	4f 83       	std	Y+7, r20	; 0x07
     3ec:	58 87       	std	Y+8, r21	; 0x08
     3ee:	f9 e0       	ldi	r31, 0x09	; 9
     3f0:	ef 2e       	mov	r14, r31
     3f2:	f1 2c       	mov	r15, r1
     3f4:	ec 0e       	add	r14, r28
     3f6:	fd 1e       	adc	r15, r29
     3f8:	ce 01       	movw	r24, r28
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	b7 01       	movw	r22, r14
     3fe:	0c d4       	rcall	.+2072   	; 0xc18 <__unpack_f>
     400:	8e 01       	movw	r16, r28
     402:	0f 5e       	subi	r16, 0xEF	; 239
     404:	1f 4f       	sbci	r17, 0xFF	; 255
     406:	ce 01       	movw	r24, r28
     408:	05 96       	adiw	r24, 0x05	; 5
     40a:	b8 01       	movw	r22, r16
     40c:	05 d4       	rcall	.+2058   	; 0xc18 <__unpack_f>
     40e:	c7 01       	movw	r24, r14
     410:	b8 01       	movw	r22, r16
     412:	ae 01       	movw	r20, r28
     414:	47 5e       	subi	r20, 0xE7	; 231
     416:	5f 4f       	sbci	r21, 0xFF	; 255
     418:	63 de       	rcall	.-826    	; 0xe0 <_fpadd_parts>
     41a:	29 d3       	rcall	.+1618   	; 0xa6e <__pack_f>
     41c:	a0 96       	adiw	r28, 0x20	; 32
     41e:	e6 e0       	ldi	r30, 0x06	; 6
     420:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x18>

00000424 <__mulsf3>:
     424:	a0 e2       	ldi	r26, 0x20	; 32
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e8 e1       	ldi	r30, 0x18	; 24
     42a:	f2 e0       	ldi	r31, 0x02	; 2
     42c:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__prologue_saves__>
     430:	69 83       	std	Y+1, r22	; 0x01
     432:	7a 83       	std	Y+2, r23	; 0x02
     434:	8b 83       	std	Y+3, r24	; 0x03
     436:	9c 83       	std	Y+4, r25	; 0x04
     438:	2d 83       	std	Y+5, r18	; 0x05
     43a:	3e 83       	std	Y+6, r19	; 0x06
     43c:	4f 83       	std	Y+7, r20	; 0x07
     43e:	58 87       	std	Y+8, r21	; 0x08
     440:	ce 01       	movw	r24, r28
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	be 01       	movw	r22, r28
     446:	67 5f       	subi	r22, 0xF7	; 247
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	e6 d3       	rcall	.+1996   	; 0xc18 <__unpack_f>
     44c:	ce 01       	movw	r24, r28
     44e:	05 96       	adiw	r24, 0x05	; 5
     450:	be 01       	movw	r22, r28
     452:	6f 5e       	subi	r22, 0xEF	; 239
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	e0 d3       	rcall	.+1984   	; 0xc18 <__unpack_f>
     458:	99 85       	ldd	r25, Y+9	; 0x09
     45a:	92 30       	cpi	r25, 0x02	; 2
     45c:	88 f0       	brcs	.+34     	; 0x480 <__mulsf3+0x5c>
     45e:	89 89       	ldd	r24, Y+17	; 0x11
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	c8 f0       	brcs	.+50     	; 0x496 <__mulsf3+0x72>
     464:	94 30       	cpi	r25, 0x04	; 4
     466:	19 f4       	brne	.+6      	; 0x46e <__mulsf3+0x4a>
     468:	82 30       	cpi	r24, 0x02	; 2
     46a:	51 f4       	brne	.+20     	; 0x480 <__mulsf3+0x5c>
     46c:	04 c0       	rjmp	.+8      	; 0x476 <__mulsf3+0x52>
     46e:	84 30       	cpi	r24, 0x04	; 4
     470:	29 f4       	brne	.+10     	; 0x47c <__mulsf3+0x58>
     472:	92 30       	cpi	r25, 0x02	; 2
     474:	81 f4       	brne	.+32     	; 0x496 <__mulsf3+0x72>
     476:	86 e8       	ldi	r24, 0x86	; 134
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	c6 c0       	rjmp	.+396    	; 0x608 <__mulsf3+0x1e4>
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	49 f4       	brne	.+18     	; 0x492 <__mulsf3+0x6e>
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	9a 85       	ldd	r25, Y+10	; 0x0a
     484:	8a 89       	ldd	r24, Y+18	; 0x12
     486:	98 13       	cpse	r25, r24
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	2a 87       	std	Y+10, r18	; 0x0a
     48c:	ce 01       	movw	r24, r28
     48e:	09 96       	adiw	r24, 0x09	; 9
     490:	bb c0       	rjmp	.+374    	; 0x608 <__mulsf3+0x1e4>
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	49 f4       	brne	.+18     	; 0x4a8 <__mulsf3+0x84>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	9a 85       	ldd	r25, Y+10	; 0x0a
     49a:	8a 89       	ldd	r24, Y+18	; 0x12
     49c:	98 13       	cpse	r25, r24
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	2a 8b       	std	Y+18, r18	; 0x12
     4a2:	ce 01       	movw	r24, r28
     4a4:	41 96       	adiw	r24, 0x11	; 17
     4a6:	b0 c0       	rjmp	.+352    	; 0x608 <__mulsf3+0x1e4>
     4a8:	2d 84       	ldd	r2, Y+13	; 0x0d
     4aa:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ac:	4f 84       	ldd	r4, Y+15	; 0x0f
     4ae:	58 88       	ldd	r5, Y+16	; 0x10
     4b0:	6d 88       	ldd	r6, Y+21	; 0x15
     4b2:	7e 88       	ldd	r7, Y+22	; 0x16
     4b4:	8f 88       	ldd	r8, Y+23	; 0x17
     4b6:	98 8c       	ldd	r9, Y+24	; 0x18
     4b8:	ee 24       	eor	r14, r14
     4ba:	ff 24       	eor	r15, r15
     4bc:	87 01       	movw	r16, r14
     4be:	aa 24       	eor	r10, r10
     4c0:	bb 24       	eor	r11, r11
     4c2:	65 01       	movw	r12, r10
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	e0 e0       	ldi	r30, 0x00	; 0
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	c1 01       	movw	r24, r2
     4d2:	81 70       	andi	r24, 0x01	; 1
     4d4:	90 70       	andi	r25, 0x00	; 0
     4d6:	89 2b       	or	r24, r25
     4d8:	e9 f0       	breq	.+58     	; 0x514 <__mulsf3+0xf0>
     4da:	e6 0c       	add	r14, r6
     4dc:	f7 1c       	adc	r15, r7
     4de:	08 1d       	adc	r16, r8
     4e0:	19 1d       	adc	r17, r9
     4e2:	9a 01       	movw	r18, r20
     4e4:	ab 01       	movw	r20, r22
     4e6:	2a 0d       	add	r18, r10
     4e8:	3b 1d       	adc	r19, r11
     4ea:	4c 1d       	adc	r20, r12
     4ec:	5d 1d       	adc	r21, r13
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	a0 e0       	ldi	r26, 0x00	; 0
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	e6 14       	cp	r14, r6
     4f8:	f7 04       	cpc	r15, r7
     4fa:	08 05       	cpc	r16, r8
     4fc:	19 05       	cpc	r17, r9
     4fe:	20 f4       	brcc	.+8      	; 0x508 <__mulsf3+0xe4>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	a0 e0       	ldi	r26, 0x00	; 0
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	ba 01       	movw	r22, r20
     50a:	a9 01       	movw	r20, r18
     50c:	48 0f       	add	r20, r24
     50e:	59 1f       	adc	r21, r25
     510:	6a 1f       	adc	r22, r26
     512:	7b 1f       	adc	r23, r27
     514:	aa 0c       	add	r10, r10
     516:	bb 1c       	adc	r11, r11
     518:	cc 1c       	adc	r12, r12
     51a:	dd 1c       	adc	r13, r13
     51c:	97 fe       	sbrs	r9, 7
     51e:	08 c0       	rjmp	.+16     	; 0x530 <__mulsf3+0x10c>
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	a8 2a       	or	r10, r24
     52a:	b9 2a       	or	r11, r25
     52c:	ca 2a       	or	r12, r26
     52e:	db 2a       	or	r13, r27
     530:	31 96       	adiw	r30, 0x01	; 1
     532:	e0 32       	cpi	r30, 0x20	; 32
     534:	f1 05       	cpc	r31, r1
     536:	49 f0       	breq	.+18     	; 0x54a <__mulsf3+0x126>
     538:	66 0c       	add	r6, r6
     53a:	77 1c       	adc	r7, r7
     53c:	88 1c       	adc	r8, r8
     53e:	99 1c       	adc	r9, r9
     540:	56 94       	lsr	r5
     542:	47 94       	ror	r4
     544:	37 94       	ror	r3
     546:	27 94       	ror	r2
     548:	c3 cf       	rjmp	.-122    	; 0x4d0 <__mulsf3+0xac>
     54a:	fa 85       	ldd	r31, Y+10	; 0x0a
     54c:	ea 89       	ldd	r30, Y+18	; 0x12
     54e:	2b 89       	ldd	r18, Y+19	; 0x13
     550:	3c 89       	ldd	r19, Y+20	; 0x14
     552:	8b 85       	ldd	r24, Y+11	; 0x0b
     554:	9c 85       	ldd	r25, Y+12	; 0x0c
     556:	28 0f       	add	r18, r24
     558:	39 1f       	adc	r19, r25
     55a:	2e 5f       	subi	r18, 0xFE	; 254
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	17 c0       	rjmp	.+46     	; 0x58e <__mulsf3+0x16a>
     560:	ca 01       	movw	r24, r20
     562:	81 70       	andi	r24, 0x01	; 1
     564:	90 70       	andi	r25, 0x00	; 0
     566:	89 2b       	or	r24, r25
     568:	61 f0       	breq	.+24     	; 0x582 <__mulsf3+0x15e>
     56a:	16 95       	lsr	r17
     56c:	07 95       	ror	r16
     56e:	f7 94       	ror	r15
     570:	e7 94       	ror	r14
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	a0 e0       	ldi	r26, 0x00	; 0
     578:	b0 e8       	ldi	r27, 0x80	; 128
     57a:	e8 2a       	or	r14, r24
     57c:	f9 2a       	or	r15, r25
     57e:	0a 2b       	or	r16, r26
     580:	1b 2b       	or	r17, r27
     582:	76 95       	lsr	r23
     584:	67 95       	ror	r22
     586:	57 95       	ror	r21
     588:	47 95       	ror	r20
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
     58e:	77 fd       	sbrc	r23, 7
     590:	e7 cf       	rjmp	.-50     	; 0x560 <__mulsf3+0x13c>
     592:	0c c0       	rjmp	.+24     	; 0x5ac <__mulsf3+0x188>
     594:	44 0f       	add	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	66 1f       	adc	r22, r22
     59a:	77 1f       	adc	r23, r23
     59c:	17 fd       	sbrc	r17, 7
     59e:	41 60       	ori	r20, 0x01	; 1
     5a0:	ee 0c       	add	r14, r14
     5a2:	ff 1c       	adc	r15, r15
     5a4:	00 1f       	adc	r16, r16
     5a6:	11 1f       	adc	r17, r17
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	30 40       	sbci	r19, 0x00	; 0
     5ac:	40 30       	cpi	r20, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	59 07       	cpc	r21, r25
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	69 07       	cpc	r22, r25
     5b6:	90 e4       	ldi	r25, 0x40	; 64
     5b8:	79 07       	cpc	r23, r25
     5ba:	60 f3       	brcs	.-40     	; 0x594 <__mulsf3+0x170>
     5bc:	2b 8f       	std	Y+27, r18	; 0x1b
     5be:	3c 8f       	std	Y+28, r19	; 0x1c
     5c0:	db 01       	movw	r26, r22
     5c2:	ca 01       	movw	r24, r20
     5c4:	8f 77       	andi	r24, 0x7F	; 127
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	a0 70       	andi	r26, 0x00	; 0
     5ca:	b0 70       	andi	r27, 0x00	; 0
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	61 f4       	brne	.+24     	; 0x5ee <__mulsf3+0x1ca>
     5d6:	47 fd       	sbrc	r20, 7
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__mulsf3+0x1ca>
     5da:	e1 14       	cp	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	01 05       	cpc	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__mulsf3+0x1ca>
     5e4:	40 5c       	subi	r20, 0xC0	; 192
     5e6:	5f 4f       	sbci	r21, 0xFF	; 255
     5e8:	6f 4f       	sbci	r22, 0xFF	; 255
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	40 78       	andi	r20, 0x80	; 128
     5ee:	1a 8e       	std	Y+26, r1	; 0x1a
     5f0:	fe 17       	cp	r31, r30
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <__mulsf3+0x1d4>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	8a 8f       	std	Y+26, r24	; 0x1a
     5f8:	4d 8f       	std	Y+29, r20	; 0x1d
     5fa:	5e 8f       	std	Y+30, r21	; 0x1e
     5fc:	6f 8f       	std	Y+31, r22	; 0x1f
     5fe:	78 a3       	std	Y+32, r23	; 0x20
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	89 8f       	std	Y+25, r24	; 0x19
     604:	ce 01       	movw	r24, r28
     606:	49 96       	adiw	r24, 0x19	; 25
     608:	32 d2       	rcall	.+1124   	; 0xa6e <__pack_f>
     60a:	a0 96       	adiw	r28, 0x20	; 32
     60c:	e2 e1       	ldi	r30, 0x12	; 18
     60e:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__epilogue_restores__>

00000612 <__divsf3>:
     612:	a8 e1       	ldi	r26, 0x18	; 24
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	ef e0       	ldi	r30, 0x0F	; 15
     618:	f3 e0       	ldi	r31, 0x03	; 3
     61a:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__prologue_saves__+0x10>
     61e:	69 83       	std	Y+1, r22	; 0x01
     620:	7a 83       	std	Y+2, r23	; 0x02
     622:	8b 83       	std	Y+3, r24	; 0x03
     624:	9c 83       	std	Y+4, r25	; 0x04
     626:	2d 83       	std	Y+5, r18	; 0x05
     628:	3e 83       	std	Y+6, r19	; 0x06
     62a:	4f 83       	std	Y+7, r20	; 0x07
     62c:	58 87       	std	Y+8, r21	; 0x08
     62e:	b9 e0       	ldi	r27, 0x09	; 9
     630:	eb 2e       	mov	r14, r27
     632:	f1 2c       	mov	r15, r1
     634:	ec 0e       	add	r14, r28
     636:	fd 1e       	adc	r15, r29
     638:	ce 01       	movw	r24, r28
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	b7 01       	movw	r22, r14
     63e:	ec d2       	rcall	.+1496   	; 0xc18 <__unpack_f>
     640:	8e 01       	movw	r16, r28
     642:	0f 5e       	subi	r16, 0xEF	; 239
     644:	1f 4f       	sbci	r17, 0xFF	; 255
     646:	ce 01       	movw	r24, r28
     648:	05 96       	adiw	r24, 0x05	; 5
     64a:	b8 01       	movw	r22, r16
     64c:	e5 d2       	rcall	.+1482   	; 0xc18 <__unpack_f>
     64e:	29 85       	ldd	r18, Y+9	; 0x09
     650:	22 30       	cpi	r18, 0x02	; 2
     652:	08 f4       	brcc	.+2      	; 0x656 <__divsf3+0x44>
     654:	7e c0       	rjmp	.+252    	; 0x752 <__divsf3+0x140>
     656:	39 89       	ldd	r19, Y+17	; 0x11
     658:	32 30       	cpi	r19, 0x02	; 2
     65a:	10 f4       	brcc	.+4      	; 0x660 <__divsf3+0x4e>
     65c:	b8 01       	movw	r22, r16
     65e:	7c c0       	rjmp	.+248    	; 0x758 <__divsf3+0x146>
     660:	8a 85       	ldd	r24, Y+10	; 0x0a
     662:	9a 89       	ldd	r25, Y+18	; 0x12
     664:	89 27       	eor	r24, r25
     666:	8a 87       	std	Y+10, r24	; 0x0a
     668:	24 30       	cpi	r18, 0x04	; 4
     66a:	11 f0       	breq	.+4      	; 0x670 <__divsf3+0x5e>
     66c:	22 30       	cpi	r18, 0x02	; 2
     66e:	31 f4       	brne	.+12     	; 0x67c <__divsf3+0x6a>
     670:	23 17       	cp	r18, r19
     672:	09 f0       	breq	.+2      	; 0x676 <__divsf3+0x64>
     674:	6e c0       	rjmp	.+220    	; 0x752 <__divsf3+0x140>
     676:	66 e8       	ldi	r22, 0x86	; 134
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	6e c0       	rjmp	.+220    	; 0x758 <__divsf3+0x146>
     67c:	34 30       	cpi	r19, 0x04	; 4
     67e:	39 f4       	brne	.+14     	; 0x68e <__divsf3+0x7c>
     680:	1d 86       	std	Y+13, r1	; 0x0d
     682:	1e 86       	std	Y+14, r1	; 0x0e
     684:	1f 86       	std	Y+15, r1	; 0x0f
     686:	18 8a       	std	Y+16, r1	; 0x10
     688:	1c 86       	std	Y+12, r1	; 0x0c
     68a:	1b 86       	std	Y+11, r1	; 0x0b
     68c:	04 c0       	rjmp	.+8      	; 0x696 <__divsf3+0x84>
     68e:	32 30       	cpi	r19, 0x02	; 2
     690:	21 f4       	brne	.+8      	; 0x69a <__divsf3+0x88>
     692:	84 e0       	ldi	r24, 0x04	; 4
     694:	89 87       	std	Y+9, r24	; 0x09
     696:	b7 01       	movw	r22, r14
     698:	5f c0       	rjmp	.+190    	; 0x758 <__divsf3+0x146>
     69a:	2b 85       	ldd	r18, Y+11	; 0x0b
     69c:	3c 85       	ldd	r19, Y+12	; 0x0c
     69e:	8b 89       	ldd	r24, Y+19	; 0x13
     6a0:	9c 89       	ldd	r25, Y+20	; 0x14
     6a2:	28 1b       	sub	r18, r24
     6a4:	39 0b       	sbc	r19, r25
     6a6:	3c 87       	std	Y+12, r19	; 0x0c
     6a8:	2b 87       	std	Y+11, r18	; 0x0b
     6aa:	ed 84       	ldd	r14, Y+13	; 0x0d
     6ac:	fe 84       	ldd	r15, Y+14	; 0x0e
     6ae:	0f 85       	ldd	r16, Y+15	; 0x0f
     6b0:	18 89       	ldd	r17, Y+16	; 0x10
     6b2:	ad 88       	ldd	r10, Y+21	; 0x15
     6b4:	be 88       	ldd	r11, Y+22	; 0x16
     6b6:	cf 88       	ldd	r12, Y+23	; 0x17
     6b8:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ba:	ea 14       	cp	r14, r10
     6bc:	fb 04       	cpc	r15, r11
     6be:	0c 05       	cpc	r16, r12
     6c0:	1d 05       	cpc	r17, r13
     6c2:	40 f4       	brcc	.+16     	; 0x6d4 <__divsf3+0xc2>
     6c4:	ee 0c       	add	r14, r14
     6c6:	ff 1c       	adc	r15, r15
     6c8:	00 1f       	adc	r16, r16
     6ca:	11 1f       	adc	r17, r17
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	30 40       	sbci	r19, 0x00	; 0
     6d0:	3c 87       	std	Y+12, r19	; 0x0c
     6d2:	2b 87       	std	Y+11, r18	; 0x0b
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	a0 e0       	ldi	r26, 0x00	; 0
     6e2:	b0 e4       	ldi	r27, 0x40	; 64
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	ea 14       	cp	r14, r10
     6ea:	fb 04       	cpc	r15, r11
     6ec:	0c 05       	cpc	r16, r12
     6ee:	1d 05       	cpc	r17, r13
     6f0:	40 f0       	brcs	.+16     	; 0x702 <__divsf3+0xf0>
     6f2:	28 2b       	or	r18, r24
     6f4:	39 2b       	or	r19, r25
     6f6:	4a 2b       	or	r20, r26
     6f8:	5b 2b       	or	r21, r27
     6fa:	ea 18       	sub	r14, r10
     6fc:	fb 08       	sbc	r15, r11
     6fe:	0c 09       	sbc	r16, r12
     700:	1d 09       	sbc	r17, r13
     702:	b6 95       	lsr	r27
     704:	a7 95       	ror	r26
     706:	97 95       	ror	r25
     708:	87 95       	ror	r24
     70a:	ee 0c       	add	r14, r14
     70c:	ff 1c       	adc	r15, r15
     70e:	00 1f       	adc	r16, r16
     710:	11 1f       	adc	r17, r17
     712:	6f 5f       	subi	r22, 0xFF	; 255
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	6f 31       	cpi	r22, 0x1F	; 31
     718:	71 05       	cpc	r23, r1
     71a:	31 f7       	brne	.-52     	; 0x6e8 <__divsf3+0xd6>
     71c:	da 01       	movw	r26, r20
     71e:	c9 01       	movw	r24, r18
     720:	8f 77       	andi	r24, 0x7F	; 127
     722:	90 70       	andi	r25, 0x00	; 0
     724:	a0 70       	andi	r26, 0x00	; 0
     726:	b0 70       	andi	r27, 0x00	; 0
     728:	80 34       	cpi	r24, 0x40	; 64
     72a:	91 05       	cpc	r25, r1
     72c:	a1 05       	cpc	r26, r1
     72e:	b1 05       	cpc	r27, r1
     730:	61 f4       	brne	.+24     	; 0x74a <__divsf3+0x138>
     732:	27 fd       	sbrc	r18, 7
     734:	0a c0       	rjmp	.+20     	; 0x74a <__divsf3+0x138>
     736:	e1 14       	cp	r14, r1
     738:	f1 04       	cpc	r15, r1
     73a:	01 05       	cpc	r16, r1
     73c:	11 05       	cpc	r17, r1
     73e:	29 f0       	breq	.+10     	; 0x74a <__divsf3+0x138>
     740:	20 5c       	subi	r18, 0xC0	; 192
     742:	3f 4f       	sbci	r19, 0xFF	; 255
     744:	4f 4f       	sbci	r20, 0xFF	; 255
     746:	5f 4f       	sbci	r21, 0xFF	; 255
     748:	20 78       	andi	r18, 0x80	; 128
     74a:	2d 87       	std	Y+13, r18	; 0x0d
     74c:	3e 87       	std	Y+14, r19	; 0x0e
     74e:	4f 87       	std	Y+15, r20	; 0x0f
     750:	58 8b       	std	Y+16, r21	; 0x10
     752:	be 01       	movw	r22, r28
     754:	67 5f       	subi	r22, 0xF7	; 247
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	cb 01       	movw	r24, r22
     75a:	89 d1       	rcall	.+786    	; 0xa6e <__pack_f>
     75c:	68 96       	adiw	r28, 0x18	; 24
     75e:	ea e0       	ldi	r30, 0x0A	; 10
     760:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__epilogue_restores__+0x10>

00000764 <__gtsf2>:
     764:	a8 e1       	ldi	r26, 0x18	; 24
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	e8 eb       	ldi	r30, 0xB8	; 184
     76a:	f3 e0       	ldi	r31, 0x03	; 3
     76c:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x18>
     770:	69 83       	std	Y+1, r22	; 0x01
     772:	7a 83       	std	Y+2, r23	; 0x02
     774:	8b 83       	std	Y+3, r24	; 0x03
     776:	9c 83       	std	Y+4, r25	; 0x04
     778:	2d 83       	std	Y+5, r18	; 0x05
     77a:	3e 83       	std	Y+6, r19	; 0x06
     77c:	4f 83       	std	Y+7, r20	; 0x07
     77e:	58 87       	std	Y+8, r21	; 0x08
     780:	89 e0       	ldi	r24, 0x09	; 9
     782:	e8 2e       	mov	r14, r24
     784:	f1 2c       	mov	r15, r1
     786:	ec 0e       	add	r14, r28
     788:	fd 1e       	adc	r15, r29
     78a:	ce 01       	movw	r24, r28
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	b7 01       	movw	r22, r14
     790:	43 d2       	rcall	.+1158   	; 0xc18 <__unpack_f>
     792:	8e 01       	movw	r16, r28
     794:	0f 5e       	subi	r16, 0xEF	; 239
     796:	1f 4f       	sbci	r17, 0xFF	; 255
     798:	ce 01       	movw	r24, r28
     79a:	05 96       	adiw	r24, 0x05	; 5
     79c:	b8 01       	movw	r22, r16
     79e:	3c d2       	rcall	.+1144   	; 0xc18 <__unpack_f>
     7a0:	89 85       	ldd	r24, Y+9	; 0x09
     7a2:	82 30       	cpi	r24, 0x02	; 2
     7a4:	38 f0       	brcs	.+14     	; 0x7b4 <__gtsf2+0x50>
     7a6:	89 89       	ldd	r24, Y+17	; 0x11
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__gtsf2+0x50>
     7ac:	c7 01       	movw	r24, r14
     7ae:	b8 01       	movw	r22, r16
     7b0:	ab d2       	rcall	.+1366   	; 0xd08 <__fpcmp_parts_f>
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <__gtsf2+0x52>
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	68 96       	adiw	r28, 0x18	; 24
     7b8:	e6 e0       	ldi	r30, 0x06	; 6
     7ba:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x18>

000007be <__gesf2>:
     7be:	a8 e1       	ldi	r26, 0x18	; 24
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	e5 ee       	ldi	r30, 0xE5	; 229
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x18>
     7ca:	69 83       	std	Y+1, r22	; 0x01
     7cc:	7a 83       	std	Y+2, r23	; 0x02
     7ce:	8b 83       	std	Y+3, r24	; 0x03
     7d0:	9c 83       	std	Y+4, r25	; 0x04
     7d2:	2d 83       	std	Y+5, r18	; 0x05
     7d4:	3e 83       	std	Y+6, r19	; 0x06
     7d6:	4f 83       	std	Y+7, r20	; 0x07
     7d8:	58 87       	std	Y+8, r21	; 0x08
     7da:	89 e0       	ldi	r24, 0x09	; 9
     7dc:	e8 2e       	mov	r14, r24
     7de:	f1 2c       	mov	r15, r1
     7e0:	ec 0e       	add	r14, r28
     7e2:	fd 1e       	adc	r15, r29
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	b7 01       	movw	r22, r14
     7ea:	16 d2       	rcall	.+1068   	; 0xc18 <__unpack_f>
     7ec:	8e 01       	movw	r16, r28
     7ee:	0f 5e       	subi	r16, 0xEF	; 239
     7f0:	1f 4f       	sbci	r17, 0xFF	; 255
     7f2:	ce 01       	movw	r24, r28
     7f4:	05 96       	adiw	r24, 0x05	; 5
     7f6:	b8 01       	movw	r22, r16
     7f8:	0f d2       	rcall	.+1054   	; 0xc18 <__unpack_f>
     7fa:	89 85       	ldd	r24, Y+9	; 0x09
     7fc:	82 30       	cpi	r24, 0x02	; 2
     7fe:	38 f0       	brcs	.+14     	; 0x80e <__gesf2+0x50>
     800:	89 89       	ldd	r24, Y+17	; 0x11
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	20 f0       	brcs	.+8      	; 0x80e <__gesf2+0x50>
     806:	c7 01       	movw	r24, r14
     808:	b8 01       	movw	r22, r16
     80a:	7e d2       	rcall	.+1276   	; 0xd08 <__fpcmp_parts_f>
     80c:	01 c0       	rjmp	.+2      	; 0x810 <__gesf2+0x52>
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	68 96       	adiw	r28, 0x18	; 24
     812:	e6 e0       	ldi	r30, 0x06	; 6
     814:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x18>

00000818 <__ltsf2>:
     818:	a8 e1       	ldi	r26, 0x18	; 24
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	e2 e1       	ldi	r30, 0x12	; 18
     81e:	f4 e0       	ldi	r31, 0x04	; 4
     820:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x18>
     824:	69 83       	std	Y+1, r22	; 0x01
     826:	7a 83       	std	Y+2, r23	; 0x02
     828:	8b 83       	std	Y+3, r24	; 0x03
     82a:	9c 83       	std	Y+4, r25	; 0x04
     82c:	2d 83       	std	Y+5, r18	; 0x05
     82e:	3e 83       	std	Y+6, r19	; 0x06
     830:	4f 83       	std	Y+7, r20	; 0x07
     832:	58 87       	std	Y+8, r21	; 0x08
     834:	89 e0       	ldi	r24, 0x09	; 9
     836:	e8 2e       	mov	r14, r24
     838:	f1 2c       	mov	r15, r1
     83a:	ec 0e       	add	r14, r28
     83c:	fd 1e       	adc	r15, r29
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	b7 01       	movw	r22, r14
     844:	e9 d1       	rcall	.+978    	; 0xc18 <__unpack_f>
     846:	8e 01       	movw	r16, r28
     848:	0f 5e       	subi	r16, 0xEF	; 239
     84a:	1f 4f       	sbci	r17, 0xFF	; 255
     84c:	ce 01       	movw	r24, r28
     84e:	05 96       	adiw	r24, 0x05	; 5
     850:	b8 01       	movw	r22, r16
     852:	e2 d1       	rcall	.+964    	; 0xc18 <__unpack_f>
     854:	89 85       	ldd	r24, Y+9	; 0x09
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	38 f0       	brcs	.+14     	; 0x868 <__stack+0x9>
     85a:	89 89       	ldd	r24, Y+17	; 0x11
     85c:	82 30       	cpi	r24, 0x02	; 2
     85e:	20 f0       	brcs	.+8      	; 0x868 <__stack+0x9>
     860:	c7 01       	movw	r24, r14
     862:	b8 01       	movw	r22, r16
     864:	51 d2       	rcall	.+1186   	; 0xd08 <__fpcmp_parts_f>
     866:	01 c0       	rjmp	.+2      	; 0x86a <__stack+0xb>
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	68 96       	adiw	r28, 0x18	; 24
     86c:	e6 e0       	ldi	r30, 0x06	; 6
     86e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x18>

00000872 <__floatsisf>:
     872:	a8 e0       	ldi	r26, 0x08	; 8
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	ef e3       	ldi	r30, 0x3F	; 63
     878:	f4 e0       	ldi	r31, 0x04	; 4
     87a:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__prologue_saves__+0x12>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	83 e0       	ldi	r24, 0x03	; 3
     884:	89 83       	std	Y+1, r24	; 0x01
     886:	da 01       	movw	r26, r20
     888:	c9 01       	movw	r24, r18
     88a:	88 27       	eor	r24, r24
     88c:	b7 fd       	sbrc	r27, 7
     88e:	83 95       	inc	r24
     890:	99 27       	eor	r25, r25
     892:	aa 27       	eor	r26, r26
     894:	bb 27       	eor	r27, r27
     896:	b8 2e       	mov	r11, r24
     898:	21 15       	cp	r18, r1
     89a:	31 05       	cpc	r19, r1
     89c:	41 05       	cpc	r20, r1
     89e:	51 05       	cpc	r21, r1
     8a0:	19 f4       	brne	.+6      	; 0x8a8 <__floatsisf+0x36>
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	89 83       	std	Y+1, r24	; 0x01
     8a6:	39 c0       	rjmp	.+114    	; 0x91a <__floatsisf+0xa8>
     8a8:	88 23       	and	r24, r24
     8aa:	a9 f0       	breq	.+42     	; 0x8d6 <__floatsisf+0x64>
     8ac:	20 30       	cpi	r18, 0x00	; 0
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	38 07       	cpc	r19, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	48 07       	cpc	r20, r24
     8b6:	80 e8       	ldi	r24, 0x80	; 128
     8b8:	58 07       	cpc	r21, r24
     8ba:	29 f4       	brne	.+10     	; 0x8c6 <__floatsisf+0x54>
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	9f ec       	ldi	r25, 0xCF	; 207
     8c4:	2e c0       	rjmp	.+92     	; 0x922 <__floatsisf+0xb0>
     8c6:	ee 24       	eor	r14, r14
     8c8:	ff 24       	eor	r15, r15
     8ca:	87 01       	movw	r16, r14
     8cc:	e2 1a       	sub	r14, r18
     8ce:	f3 0a       	sbc	r15, r19
     8d0:	04 0b       	sbc	r16, r20
     8d2:	15 0b       	sbc	r17, r21
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <__floatsisf+0x68>
     8d6:	79 01       	movw	r14, r18
     8d8:	8a 01       	movw	r16, r20
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	6f d0       	rcall	.+222    	; 0x9d0 <__clzsi2>
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	18 16       	cp	r1, r24
     8f6:	19 06       	cpc	r1, r25
     8f8:	84 f4       	brge	.+32     	; 0x91a <__floatsisf+0xa8>
     8fa:	08 2e       	mov	r0, r24
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <__floatsisf+0x94>
     8fe:	ee 0c       	add	r14, r14
     900:	ff 1c       	adc	r15, r15
     902:	00 1f       	adc	r16, r16
     904:	11 1f       	adc	r17, r17
     906:	0a 94       	dec	r0
     908:	d2 f7       	brpl	.-12     	; 0x8fe <__floatsisf+0x8c>
     90a:	ed 82       	std	Y+5, r14	; 0x05
     90c:	fe 82       	std	Y+6, r15	; 0x06
     90e:	0f 83       	std	Y+7, r16	; 0x07
     910:	18 87       	std	Y+8, r17	; 0x08
     912:	c8 1a       	sub	r12, r24
     914:	d9 0a       	sbc	r13, r25
     916:	dc 82       	std	Y+4, r13	; 0x04
     918:	cb 82       	std	Y+3, r12	; 0x03
     91a:	ba 82       	std	Y+2, r11	; 0x02
     91c:	ce 01       	movw	r24, r28
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	a6 d0       	rcall	.+332    	; 0xa6e <__pack_f>
     922:	28 96       	adiw	r28, 0x08	; 8
     924:	e9 e0       	ldi	r30, 0x09	; 9
     926:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__epilogue_restores__+0x12>

0000092a <__fixsfsi>:
     92a:	ac e0       	ldi	r26, 0x0C	; 12
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	eb e9       	ldi	r30, 0x9B	; 155
     930:	f4 e0       	ldi	r31, 0x04	; 4
     932:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__prologue_saves__+0x20>
     936:	69 83       	std	Y+1, r22	; 0x01
     938:	7a 83       	std	Y+2, r23	; 0x02
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	9c 83       	std	Y+4, r25	; 0x04
     93e:	ce 01       	movw	r24, r28
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	be 01       	movw	r22, r28
     944:	6b 5f       	subi	r22, 0xFB	; 251
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	67 d1       	rcall	.+718    	; 0xc18 <__unpack_f>
     94a:	8d 81       	ldd	r24, Y+5	; 0x05
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	61 f1       	breq	.+88     	; 0x9a8 <__fixsfsi+0x7e>
     950:	82 30       	cpi	r24, 0x02	; 2
     952:	50 f1       	brcs	.+84     	; 0x9a8 <__fixsfsi+0x7e>
     954:	84 30       	cpi	r24, 0x04	; 4
     956:	21 f4       	brne	.+8      	; 0x960 <__fixsfsi+0x36>
     958:	8e 81       	ldd	r24, Y+6	; 0x06
     95a:	88 23       	and	r24, r24
     95c:	51 f1       	breq	.+84     	; 0x9b2 <__fixsfsi+0x88>
     95e:	2e c0       	rjmp	.+92     	; 0x9bc <__fixsfsi+0x92>
     960:	2f 81       	ldd	r18, Y+7	; 0x07
     962:	38 85       	ldd	r19, Y+8	; 0x08
     964:	37 fd       	sbrc	r19, 7
     966:	20 c0       	rjmp	.+64     	; 0x9a8 <__fixsfsi+0x7e>
     968:	6e 81       	ldd	r22, Y+6	; 0x06
     96a:	2f 31       	cpi	r18, 0x1F	; 31
     96c:	31 05       	cpc	r19, r1
     96e:	1c f0       	brlt	.+6      	; 0x976 <__fixsfsi+0x4c>
     970:	66 23       	and	r22, r22
     972:	f9 f0       	breq	.+62     	; 0x9b2 <__fixsfsi+0x88>
     974:	23 c0       	rjmp	.+70     	; 0x9bc <__fixsfsi+0x92>
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	82 1b       	sub	r24, r18
     97c:	93 0b       	sbc	r25, r19
     97e:	29 85       	ldd	r18, Y+9	; 0x09
     980:	3a 85       	ldd	r19, Y+10	; 0x0a
     982:	4b 85       	ldd	r20, Y+11	; 0x0b
     984:	5c 85       	ldd	r21, Y+12	; 0x0c
     986:	04 c0       	rjmp	.+8      	; 0x990 <__fixsfsi+0x66>
     988:	56 95       	lsr	r21
     98a:	47 95       	ror	r20
     98c:	37 95       	ror	r19
     98e:	27 95       	ror	r18
     990:	8a 95       	dec	r24
     992:	d2 f7       	brpl	.-12     	; 0x988 <__fixsfsi+0x5e>
     994:	66 23       	and	r22, r22
     996:	b1 f0       	breq	.+44     	; 0x9c4 <__fixsfsi+0x9a>
     998:	50 95       	com	r21
     99a:	40 95       	com	r20
     99c:	30 95       	com	r19
     99e:	21 95       	neg	r18
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	4f 4f       	sbci	r20, 0xFF	; 255
     9a4:	5f 4f       	sbci	r21, 0xFF	; 255
     9a6:	0e c0       	rjmp	.+28     	; 0x9c4 <__fixsfsi+0x9a>
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	09 c0       	rjmp	.+18     	; 0x9c4 <__fixsfsi+0x9a>
     9b2:	2f ef       	ldi	r18, 0xFF	; 255
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	4f ef       	ldi	r20, 0xFF	; 255
     9b8:	5f e7       	ldi	r21, 0x7F	; 127
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <__fixsfsi+0x9a>
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	50 e8       	ldi	r21, 0x80	; 128
     9c4:	b9 01       	movw	r22, r18
     9c6:	ca 01       	movw	r24, r20
     9c8:	2c 96       	adiw	r28, 0x0c	; 12
     9ca:	e2 e0       	ldi	r30, 0x02	; 2
     9cc:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__epilogue_restores__+0x20>

000009d0 <__clzsi2>:
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	7b 01       	movw	r14, r22
     9da:	8c 01       	movw	r16, r24
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	e8 16       	cp	r14, r24
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	f8 06       	cpc	r15, r24
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	08 07       	cpc	r16, r24
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	18 07       	cpc	r17, r24
     9ec:	88 f4       	brcc	.+34     	; 0xa10 <__clzsi2+0x40>
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	e8 16       	cp	r14, r24
     9f2:	f1 04       	cpc	r15, r1
     9f4:	01 05       	cpc	r16, r1
     9f6:	11 05       	cpc	r17, r1
     9f8:	31 f0       	breq	.+12     	; 0xa06 <__clzsi2+0x36>
     9fa:	28 f0       	brcs	.+10     	; 0xa06 <__clzsi2+0x36>
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a0 e0       	ldi	r26, 0x00	; 0
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	17 c0       	rjmp	.+46     	; 0xa34 <__clzsi2+0x64>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e0       	ldi	r26, 0x00	; 0
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	12 c0       	rjmp	.+36     	; 0xa34 <__clzsi2+0x64>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	e8 16       	cp	r14, r24
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	f8 06       	cpc	r15, r24
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	08 07       	cpc	r16, r24
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	18 07       	cpc	r17, r24
     a20:	28 f0       	brcs	.+10     	; 0xa2c <__clzsi2+0x5c>
     a22:	88 e1       	ldi	r24, 0x18	; 24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	a0 e0       	ldi	r26, 0x00	; 0
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	04 c0       	rjmp	.+8      	; 0xa34 <__clzsi2+0x64>
     a2c:	80 e1       	ldi	r24, 0x10	; 16
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	20 e2       	ldi	r18, 0x20	; 32
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	28 1b       	sub	r18, r24
     a3e:	39 0b       	sbc	r19, r25
     a40:	4a 0b       	sbc	r20, r26
     a42:	5b 0b       	sbc	r21, r27
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <__clzsi2+0x7e>
     a46:	16 95       	lsr	r17
     a48:	07 95       	ror	r16
     a4a:	f7 94       	ror	r15
     a4c:	e7 94       	ror	r14
     a4e:	8a 95       	dec	r24
     a50:	d2 f7       	brpl	.-12     	; 0xa46 <__clzsi2+0x76>
     a52:	f7 01       	movw	r30, r14
     a54:	e2 57       	subi	r30, 0x72	; 114
     a56:	ff 4f       	sbci	r31, 0xFF	; 255
     a58:	80 81       	ld	r24, Z
     a5a:	28 1b       	sub	r18, r24
     a5c:	31 09       	sbc	r19, r1
     a5e:	41 09       	sbc	r20, r1
     a60:	51 09       	sbc	r21, r1
     a62:	c9 01       	movw	r24, r18
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	08 95       	ret

00000a6e <__pack_f>:
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	fc 01       	movw	r30, r24
     a7a:	e4 80       	ldd	r14, Z+4	; 0x04
     a7c:	f5 80       	ldd	r15, Z+5	; 0x05
     a7e:	06 81       	ldd	r16, Z+6	; 0x06
     a80:	17 81       	ldd	r17, Z+7	; 0x07
     a82:	d1 80       	ldd	r13, Z+1	; 0x01
     a84:	80 81       	ld	r24, Z
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	48 f4       	brcc	.+18     	; 0xa9c <__pack_f+0x2e>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e1       	ldi	r26, 0x10	; 16
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	e8 2a       	or	r14, r24
     a94:	f9 2a       	or	r15, r25
     a96:	0a 2b       	or	r16, r26
     a98:	1b 2b       	or	r17, r27
     a9a:	a5 c0       	rjmp	.+330    	; 0xbe6 <__pack_f+0x178>
     a9c:	84 30       	cpi	r24, 0x04	; 4
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <__pack_f+0x34>
     aa0:	9f c0       	rjmp	.+318    	; 0xbe0 <__pack_f+0x172>
     aa2:	82 30       	cpi	r24, 0x02	; 2
     aa4:	21 f4       	brne	.+8      	; 0xaae <__pack_f+0x40>
     aa6:	ee 24       	eor	r14, r14
     aa8:	ff 24       	eor	r15, r15
     aaa:	87 01       	movw	r16, r14
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <__pack_f+0x4a>
     aae:	e1 14       	cp	r14, r1
     ab0:	f1 04       	cpc	r15, r1
     ab2:	01 05       	cpc	r16, r1
     ab4:	11 05       	cpc	r17, r1
     ab6:	19 f4       	brne	.+6      	; 0xabe <__pack_f+0x50>
     ab8:	e0 e0       	ldi	r30, 0x00	; 0
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	96 c0       	rjmp	.+300    	; 0xbea <__pack_f+0x17c>
     abe:	62 81       	ldd	r22, Z+2	; 0x02
     ac0:	73 81       	ldd	r23, Z+3	; 0x03
     ac2:	9f ef       	ldi	r25, 0xFF	; 255
     ac4:	62 38       	cpi	r22, 0x82	; 130
     ac6:	79 07       	cpc	r23, r25
     ac8:	0c f0       	brlt	.+2      	; 0xacc <__pack_f+0x5e>
     aca:	5b c0       	rjmp	.+182    	; 0xb82 <__pack_f+0x114>
     acc:	22 e8       	ldi	r18, 0x82	; 130
     ace:	3f ef       	ldi	r19, 0xFF	; 255
     ad0:	26 1b       	sub	r18, r22
     ad2:	37 0b       	sbc	r19, r23
     ad4:	2a 31       	cpi	r18, 0x1A	; 26
     ad6:	31 05       	cpc	r19, r1
     ad8:	2c f0       	brlt	.+10     	; 0xae4 <__pack_f+0x76>
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	2a c0       	rjmp	.+84     	; 0xb38 <__pack_f+0xca>
     ae4:	b8 01       	movw	r22, r16
     ae6:	a7 01       	movw	r20, r14
     ae8:	02 2e       	mov	r0, r18
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <__pack_f+0x86>
     aec:	76 95       	lsr	r23
     aee:	67 95       	ror	r22
     af0:	57 95       	ror	r21
     af2:	47 95       	ror	r20
     af4:	0a 94       	dec	r0
     af6:	d2 f7       	brpl	.-12     	; 0xaec <__pack_f+0x7e>
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	04 c0       	rjmp	.+8      	; 0xb0a <__pack_f+0x9c>
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	aa 1f       	adc	r26, r26
     b08:	bb 1f       	adc	r27, r27
     b0a:	2a 95       	dec	r18
     b0c:	d2 f7       	brpl	.-12     	; 0xb02 <__pack_f+0x94>
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	a1 09       	sbc	r26, r1
     b12:	b1 09       	sbc	r27, r1
     b14:	8e 21       	and	r24, r14
     b16:	9f 21       	and	r25, r15
     b18:	a0 23       	and	r26, r16
     b1a:	b1 23       	and	r27, r17
     b1c:	00 97       	sbiw	r24, 0x00	; 0
     b1e:	a1 05       	cpc	r26, r1
     b20:	b1 05       	cpc	r27, r1
     b22:	21 f0       	breq	.+8      	; 0xb2c <__pack_f+0xbe>
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	9a 01       	movw	r18, r20
     b2e:	ab 01       	movw	r20, r22
     b30:	28 2b       	or	r18, r24
     b32:	39 2b       	or	r19, r25
     b34:	4a 2b       	or	r20, r26
     b36:	5b 2b       	or	r21, r27
     b38:	da 01       	movw	r26, r20
     b3a:	c9 01       	movw	r24, r18
     b3c:	8f 77       	andi	r24, 0x7F	; 127
     b3e:	90 70       	andi	r25, 0x00	; 0
     b40:	a0 70       	andi	r26, 0x00	; 0
     b42:	b0 70       	andi	r27, 0x00	; 0
     b44:	80 34       	cpi	r24, 0x40	; 64
     b46:	91 05       	cpc	r25, r1
     b48:	a1 05       	cpc	r26, r1
     b4a:	b1 05       	cpc	r27, r1
     b4c:	39 f4       	brne	.+14     	; 0xb5c <__pack_f+0xee>
     b4e:	27 ff       	sbrs	r18, 7
     b50:	09 c0       	rjmp	.+18     	; 0xb64 <__pack_f+0xf6>
     b52:	20 5c       	subi	r18, 0xC0	; 192
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	4f 4f       	sbci	r20, 0xFF	; 255
     b58:	5f 4f       	sbci	r21, 0xFF	; 255
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__pack_f+0xf6>
     b5c:	21 5c       	subi	r18, 0xC1	; 193
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	4f 4f       	sbci	r20, 0xFF	; 255
     b62:	5f 4f       	sbci	r21, 0xFF	; 255
     b64:	e0 e0       	ldi	r30, 0x00	; 0
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	20 30       	cpi	r18, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	3a 07       	cpc	r19, r26
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	4a 07       	cpc	r20, r26
     b72:	a0 e4       	ldi	r26, 0x40	; 64
     b74:	5a 07       	cpc	r21, r26
     b76:	10 f0       	brcs	.+4      	; 0xb7c <__pack_f+0x10e>
     b78:	e1 e0       	ldi	r30, 0x01	; 1
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	79 01       	movw	r14, r18
     b7e:	8a 01       	movw	r16, r20
     b80:	27 c0       	rjmp	.+78     	; 0xbd0 <__pack_f+0x162>
     b82:	60 38       	cpi	r22, 0x80	; 128
     b84:	71 05       	cpc	r23, r1
     b86:	64 f5       	brge	.+88     	; 0xbe0 <__pack_f+0x172>
     b88:	fb 01       	movw	r30, r22
     b8a:	e1 58       	subi	r30, 0x81	; 129
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	d8 01       	movw	r26, r16
     b90:	c7 01       	movw	r24, r14
     b92:	8f 77       	andi	r24, 0x7F	; 127
     b94:	90 70       	andi	r25, 0x00	; 0
     b96:	a0 70       	andi	r26, 0x00	; 0
     b98:	b0 70       	andi	r27, 0x00	; 0
     b9a:	80 34       	cpi	r24, 0x40	; 64
     b9c:	91 05       	cpc	r25, r1
     b9e:	a1 05       	cpc	r26, r1
     ba0:	b1 05       	cpc	r27, r1
     ba2:	39 f4       	brne	.+14     	; 0xbb2 <__pack_f+0x144>
     ba4:	e7 fe       	sbrs	r14, 7
     ba6:	0d c0       	rjmp	.+26     	; 0xbc2 <__pack_f+0x154>
     ba8:	80 e4       	ldi	r24, 0x40	; 64
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <__pack_f+0x14c>
     bb2:	8f e3       	ldi	r24, 0x3F	; 63
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e8 0e       	add	r14, r24
     bbc:	f9 1e       	adc	r15, r25
     bbe:	0a 1f       	adc	r16, r26
     bc0:	1b 1f       	adc	r17, r27
     bc2:	17 ff       	sbrs	r17, 7
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <__pack_f+0x162>
     bc6:	16 95       	lsr	r17
     bc8:	07 95       	ror	r16
     bca:	f7 94       	ror	r15
     bcc:	e7 94       	ror	r14
     bce:	31 96       	adiw	r30, 0x01	; 1
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	16 95       	lsr	r17
     bd4:	07 95       	ror	r16
     bd6:	f7 94       	ror	r15
     bd8:	e7 94       	ror	r14
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__pack_f+0x164>
     bde:	05 c0       	rjmp	.+10     	; 0xbea <__pack_f+0x17c>
     be0:	ee 24       	eor	r14, r14
     be2:	ff 24       	eor	r15, r15
     be4:	87 01       	movw	r16, r14
     be6:	ef ef       	ldi	r30, 0xFF	; 255
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	6e 2f       	mov	r22, r30
     bec:	67 95       	ror	r22
     bee:	66 27       	eor	r22, r22
     bf0:	67 95       	ror	r22
     bf2:	90 2f       	mov	r25, r16
     bf4:	9f 77       	andi	r25, 0x7F	; 127
     bf6:	d7 94       	ror	r13
     bf8:	dd 24       	eor	r13, r13
     bfa:	d7 94       	ror	r13
     bfc:	8e 2f       	mov	r24, r30
     bfe:	86 95       	lsr	r24
     c00:	49 2f       	mov	r20, r25
     c02:	46 2b       	or	r20, r22
     c04:	58 2f       	mov	r21, r24
     c06:	5d 29       	or	r21, r13
     c08:	b7 01       	movw	r22, r14
     c0a:	ca 01       	movw	r24, r20
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	df 90       	pop	r13
     c16:	08 95       	ret

00000c18 <__unpack_f>:
     c18:	fc 01       	movw	r30, r24
     c1a:	db 01       	movw	r26, r22
     c1c:	40 81       	ld	r20, Z
     c1e:	51 81       	ldd	r21, Z+1	; 0x01
     c20:	22 81       	ldd	r18, Z+2	; 0x02
     c22:	62 2f       	mov	r22, r18
     c24:	6f 77       	andi	r22, 0x7F	; 127
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	22 1f       	adc	r18, r18
     c2a:	22 27       	eor	r18, r18
     c2c:	22 1f       	adc	r18, r18
     c2e:	93 81       	ldd	r25, Z+3	; 0x03
     c30:	89 2f       	mov	r24, r25
     c32:	88 0f       	add	r24, r24
     c34:	82 2b       	or	r24, r18
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	99 1f       	adc	r25, r25
     c3c:	99 27       	eor	r25, r25
     c3e:	99 1f       	adc	r25, r25
     c40:	11 96       	adiw	r26, 0x01	; 1
     c42:	9c 93       	st	X, r25
     c44:	11 97       	sbiw	r26, 0x01	; 1
     c46:	21 15       	cp	r18, r1
     c48:	31 05       	cpc	r19, r1
     c4a:	a9 f5       	brne	.+106    	; 0xcb6 <__unpack_f+0x9e>
     c4c:	41 15       	cp	r20, r1
     c4e:	51 05       	cpc	r21, r1
     c50:	61 05       	cpc	r22, r1
     c52:	71 05       	cpc	r23, r1
     c54:	11 f4       	brne	.+4      	; 0xc5a <__unpack_f+0x42>
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	37 c0       	rjmp	.+110    	; 0xcc8 <__unpack_f+0xb0>
     c5a:	82 e8       	ldi	r24, 0x82	; 130
     c5c:	9f ef       	ldi	r25, 0xFF	; 255
     c5e:	13 96       	adiw	r26, 0x03	; 3
     c60:	9c 93       	st	X, r25
     c62:	8e 93       	st	-X, r24
     c64:	12 97       	sbiw	r26, 0x02	; 2
     c66:	9a 01       	movw	r18, r20
     c68:	ab 01       	movw	r20, r22
     c6a:	67 e0       	ldi	r22, 0x07	; 7
     c6c:	22 0f       	add	r18, r18
     c6e:	33 1f       	adc	r19, r19
     c70:	44 1f       	adc	r20, r20
     c72:	55 1f       	adc	r21, r21
     c74:	6a 95       	dec	r22
     c76:	d1 f7       	brne	.-12     	; 0xc6c <__unpack_f+0x54>
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	8c 93       	st	X, r24
     c7c:	0d c0       	rjmp	.+26     	; 0xc98 <__unpack_f+0x80>
     c7e:	22 0f       	add	r18, r18
     c80:	33 1f       	adc	r19, r19
     c82:	44 1f       	adc	r20, r20
     c84:	55 1f       	adc	r21, r21
     c86:	12 96       	adiw	r26, 0x02	; 2
     c88:	8d 91       	ld	r24, X+
     c8a:	9c 91       	ld	r25, X
     c8c:	13 97       	sbiw	r26, 0x03	; 3
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	13 96       	adiw	r26, 0x03	; 3
     c92:	9c 93       	st	X, r25
     c94:	8e 93       	st	-X, r24
     c96:	12 97       	sbiw	r26, 0x02	; 2
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	38 07       	cpc	r19, r24
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	48 07       	cpc	r20, r24
     ca2:	80 e4       	ldi	r24, 0x40	; 64
     ca4:	58 07       	cpc	r21, r24
     ca6:	58 f3       	brcs	.-42     	; 0xc7e <__unpack_f+0x66>
     ca8:	14 96       	adiw	r26, 0x04	; 4
     caa:	2d 93       	st	X+, r18
     cac:	3d 93       	st	X+, r19
     cae:	4d 93       	st	X+, r20
     cb0:	5c 93       	st	X, r21
     cb2:	17 97       	sbiw	r26, 0x07	; 7
     cb4:	08 95       	ret
     cb6:	2f 3f       	cpi	r18, 0xFF	; 255
     cb8:	31 05       	cpc	r19, r1
     cba:	79 f4       	brne	.+30     	; 0xcda <__unpack_f+0xc2>
     cbc:	41 15       	cp	r20, r1
     cbe:	51 05       	cpc	r21, r1
     cc0:	61 05       	cpc	r22, r1
     cc2:	71 05       	cpc	r23, r1
     cc4:	19 f4       	brne	.+6      	; 0xccc <__unpack_f+0xb4>
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	8c 93       	st	X, r24
     cca:	08 95       	ret
     ccc:	64 ff       	sbrs	r22, 4
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <__unpack_f+0xbe>
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	8c 93       	st	X, r24
     cd4:	12 c0       	rjmp	.+36     	; 0xcfa <__unpack_f+0xe2>
     cd6:	1c 92       	st	X, r1
     cd8:	10 c0       	rjmp	.+32     	; 0xcfa <__unpack_f+0xe2>
     cda:	2f 57       	subi	r18, 0x7F	; 127
     cdc:	30 40       	sbci	r19, 0x00	; 0
     cde:	13 96       	adiw	r26, 0x03	; 3
     ce0:	3c 93       	st	X, r19
     ce2:	2e 93       	st	-X, r18
     ce4:	12 97       	sbiw	r26, 0x02	; 2
     ce6:	83 e0       	ldi	r24, 0x03	; 3
     ce8:	8c 93       	st	X, r24
     cea:	87 e0       	ldi	r24, 0x07	; 7
     cec:	44 0f       	add	r20, r20
     cee:	55 1f       	adc	r21, r21
     cf0:	66 1f       	adc	r22, r22
     cf2:	77 1f       	adc	r23, r23
     cf4:	8a 95       	dec	r24
     cf6:	d1 f7       	brne	.-12     	; 0xcec <__unpack_f+0xd4>
     cf8:	70 64       	ori	r23, 0x40	; 64
     cfa:	14 96       	adiw	r26, 0x04	; 4
     cfc:	4d 93       	st	X+, r20
     cfe:	5d 93       	st	X+, r21
     d00:	6d 93       	st	X+, r22
     d02:	7c 93       	st	X, r23
     d04:	17 97       	sbiw	r26, 0x07	; 7
     d06:	08 95       	ret

00000d08 <__fpcmp_parts_f>:
     d08:	1f 93       	push	r17
     d0a:	dc 01       	movw	r26, r24
     d0c:	fb 01       	movw	r30, r22
     d0e:	9c 91       	ld	r25, X
     d10:	92 30       	cpi	r25, 0x02	; 2
     d12:	08 f4       	brcc	.+2      	; 0xd16 <__fpcmp_parts_f+0xe>
     d14:	47 c0       	rjmp	.+142    	; 0xda4 <__fpcmp_parts_f+0x9c>
     d16:	80 81       	ld	r24, Z
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	08 f4       	brcc	.+2      	; 0xd1e <__fpcmp_parts_f+0x16>
     d1c:	43 c0       	rjmp	.+134    	; 0xda4 <__fpcmp_parts_f+0x9c>
     d1e:	94 30       	cpi	r25, 0x04	; 4
     d20:	51 f4       	brne	.+20     	; 0xd36 <__fpcmp_parts_f+0x2e>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	99 f5       	brne	.+102    	; 0xd90 <__fpcmp_parts_f+0x88>
     d2a:	81 81       	ldd	r24, Z+1	; 0x01
     d2c:	68 2f       	mov	r22, r24
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	61 1b       	sub	r22, r17
     d32:	71 09       	sbc	r23, r1
     d34:	3f c0       	rjmp	.+126    	; 0xdb4 <__fpcmp_parts_f+0xac>
     d36:	84 30       	cpi	r24, 0x04	; 4
     d38:	21 f0       	breq	.+8      	; 0xd42 <__fpcmp_parts_f+0x3a>
     d3a:	92 30       	cpi	r25, 0x02	; 2
     d3c:	31 f4       	brne	.+12     	; 0xd4a <__fpcmp_parts_f+0x42>
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	b9 f1       	breq	.+110    	; 0xdb0 <__fpcmp_parts_f+0xa8>
     d42:	81 81       	ldd	r24, Z+1	; 0x01
     d44:	88 23       	and	r24, r24
     d46:	89 f1       	breq	.+98     	; 0xdaa <__fpcmp_parts_f+0xa2>
     d48:	2d c0       	rjmp	.+90     	; 0xda4 <__fpcmp_parts_f+0x9c>
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	1c 91       	ld	r17, X
     d4e:	11 97       	sbiw	r26, 0x01	; 1
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	f1 f0       	breq	.+60     	; 0xd90 <__fpcmp_parts_f+0x88>
     d54:	81 81       	ldd	r24, Z+1	; 0x01
     d56:	18 17       	cp	r17, r24
     d58:	d9 f4       	brne	.+54     	; 0xd90 <__fpcmp_parts_f+0x88>
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	2d 91       	ld	r18, X+
     d5e:	3c 91       	ld	r19, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	93 81       	ldd	r25, Z+3	; 0x03
     d66:	82 17       	cp	r24, r18
     d68:	93 07       	cpc	r25, r19
     d6a:	94 f0       	brlt	.+36     	; 0xd90 <__fpcmp_parts_f+0x88>
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	bc f0       	brlt	.+46     	; 0xda0 <__fpcmp_parts_f+0x98>
     d72:	14 96       	adiw	r26, 0x04	; 4
     d74:	8d 91       	ld	r24, X+
     d76:	9d 91       	ld	r25, X+
     d78:	0d 90       	ld	r0, X+
     d7a:	bc 91       	ld	r27, X
     d7c:	a0 2d       	mov	r26, r0
     d7e:	24 81       	ldd	r18, Z+4	; 0x04
     d80:	35 81       	ldd	r19, Z+5	; 0x05
     d82:	46 81       	ldd	r20, Z+6	; 0x06
     d84:	57 81       	ldd	r21, Z+7	; 0x07
     d86:	28 17       	cp	r18, r24
     d88:	39 07       	cpc	r19, r25
     d8a:	4a 07       	cpc	r20, r26
     d8c:	5b 07       	cpc	r21, r27
     d8e:	18 f4       	brcc	.+6      	; 0xd96 <__fpcmp_parts_f+0x8e>
     d90:	11 23       	and	r17, r17
     d92:	41 f0       	breq	.+16     	; 0xda4 <__fpcmp_parts_f+0x9c>
     d94:	0a c0       	rjmp	.+20     	; 0xdaa <__fpcmp_parts_f+0xa2>
     d96:	82 17       	cp	r24, r18
     d98:	93 07       	cpc	r25, r19
     d9a:	a4 07       	cpc	r26, r20
     d9c:	b5 07       	cpc	r27, r21
     d9e:	40 f4       	brcc	.+16     	; 0xdb0 <__fpcmp_parts_f+0xa8>
     da0:	11 23       	and	r17, r17
     da2:	19 f0       	breq	.+6      	; 0xdaa <__fpcmp_parts_f+0xa2>
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <__fpcmp_parts_f+0xac>
     daa:	6f ef       	ldi	r22, 0xFF	; 255
     dac:	7f ef       	ldi	r23, 0xFF	; 255
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <__fpcmp_parts_f+0xac>
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	cb 01       	movw	r24, r22
     db6:	1f 91       	pop	r17
     db8:	08 95       	ret

00000dba <Poll>:
int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;

void Poll(void)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <Poll+0x6>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
	if(polling_enabled && (!counter))
     dc4:	80 91 8e 01 	lds	r24, 0x018E
     dc8:	90 91 8f 01 	lds	r25, 0x018F
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	19 f1       	breq	.+70     	; 0xe16 <Poll+0x5c>
     dd0:	80 91 92 01 	lds	r24, 0x0192
     dd4:	90 91 93 01 	lds	r25, 0x0193
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	e9 f4       	brne	.+58     	; 0xe16 <Poll+0x5c>
	{
		signed int data;
		data = TC72_ReadTempr();
     ddc:	38 d1       	rcall	.+624    	; 0x104e <TC72_ReadTempr>
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	89 81       	ldd	r24, Y+1	; 0x01
		data = GetData( data);
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	59 d1       	rcall	.+690    	; 0x109a <GetData>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	bc 01       	movw	r22, r24
     dee:	cd 01       	movw	r24, r26
     df0:	9c dd       	rcall	.-1224   	; 0x92a <__fixsfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	aa 27       	eor	r26, r26
		Handle_data(data);
     e00:	97 fd       	sbrc	r25, 7
     e02:	a0 95       	com	r26
     e04:	ba 2f       	mov	r27, r26
     e06:	bc 01       	movw	r22, r24
     e08:	cd 01       	movw	r24, r26
     e0a:	33 dd       	rcall	.-1434   	; 0x872 <__floatsisf>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	bc 01       	movw	r22, r24
     e12:	cd 01       	movw	r24, r26
     e14:	fe d0       	rcall	.+508    	; 0x1012 <Handle_data>
     e16:	80 91 92 01 	lds	r24, 0x0192
     e1a:	90 91 93 01 	lds	r25, 0x0193
     e1e:	01 96       	adiw	r24, 0x01	; 1

	}
	counter++;
     e20:	90 93 93 01 	sts	0x0193, r25
     e24:	80 93 92 01 	sts	0x0192, r24
     e28:	80 91 92 01 	lds	r24, 0x0192
     e2c:	90 91 93 01 	lds	r25, 0x0193
     e30:	20 91 90 01 	lds	r18, 0x0190
	counter = counter%polling_counter;
     e34:	30 91 91 01 	lds	r19, 0x0191
     e38:	b9 01       	movw	r22, r18
     e3a:	0e 94 3e 13 	call	0x267c	; 0x267c <__divmodhi4>
     e3e:	90 93 93 01 	sts	0x0193, r25
     e42:	80 93 92 01 	sts	0x0192, r24
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <StartPolling>:
}

void StartPolling(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	90 93 8f 01 	sts	0x018F, r25
     e60:	80 93 8e 01 	sts	0x018E, r24
}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <SetPollingTime>:
{
	polling_enabled=0;
}

void SetPollingTime(int polling_time)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <SetPollingTime+0x6>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
	polling_counter = polling_time/100;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	24 e6       	ldi	r18, 0x64	; 100
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	b9 01       	movw	r22, r18
     e82:	0e 94 3e 13 	call	0x267c	; 0x267c <__divmodhi4>
     e86:	cb 01       	movw	r24, r22
     e88:	90 93 91 01 	sts	0x0191, r25
     e8c:	80 93 90 01 	sts	0x0190, r24
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <StartTimer>:
Timer_ConfigType TIMER0_config; /* Declaring a global variable for Timer0 configuration */

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

void StartTimer(const Timer_ConfigType * Config_Ptr)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <StartTimer+0x6>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = ( Config_Ptr->initial_value);  // Set Initial Value to 0
     ea8:	a2 e5       	ldi	r26, 0x52	; 82
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	82 81       	ldd	r24, Z+2	; 0x02
     eb2:	93 81       	ldd	r25, Z+3	; 0x03
     eb4:	8c 93       	st	X, r24
		TCCR0 = (1<<FOC0) | ((Config_Ptr->clock & 0x07) | (TCCR0 & 0XF8));
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e9 81       	ldd	r30, Y+1	; 0x01
     ebc:	fa 81       	ldd	r31, Y+2	; 0x02
     ebe:	80 81       	ld	r24, Z
     ec0:	98 2f       	mov	r25, r24
     ec2:	97 70       	andi	r25, 0x07	; 7
     ec4:	e3 e5       	ldi	r30, 0x53	; 83
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	88 7f       	andi	r24, 0xF8	; 248
     ecc:	89 2b       	or	r24, r25
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	8c 93       	st	X, r24
		 SREG |=(1<<7); //Enable interrupts
     ed2:	af e5       	ldi	r26, 0x5F	; 95
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e5       	ldi	r30, 0x5F	; 95
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	8c 93       	st	X, r24
		if ((Config_Ptr->mode) == CTC )
     ee0:	e9 81       	ldd	r30, Y+1	; 0x01
     ee2:	fa 81       	ldd	r31, Y+2	; 0x02
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	b1 f4       	brne	.+44     	; 0xf16 <StartTimer+0x7c>
		{
			OCR0 = (Config_Ptr->compare_value); // Set Compare Value
     eea:	ac e5       	ldi	r26, 0x5C	; 92
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e9 81       	ldd	r30, Y+1	; 0x01
     ef0:	fa 81       	ldd	r31, Y+2	; 0x02
     ef2:	84 81       	ldd	r24, Z+4	; 0x04
     ef4:	95 81       	ldd	r25, Z+5	; 0x05
     ef6:	8c 93       	st	X, r24

			TCCR0 |= (1<<WGM01);
     ef8:	a3 e5       	ldi	r26, 0x53	; 83
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e3 e5       	ldi	r30, 0x53	; 83
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
     f06:	a9 e5       	ldi	r26, 0x59	; 89
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e9 e5       	ldi	r30, 0x59	; 89
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	82 60       	ori	r24, 0x02	; 2
     f12:	8c 93       	st	X, r24
     f14:	13 c0       	rjmp	.+38     	; 0xf3c <StartTimer+0xa2>

			//DDRB = DDRB | (1<<PB3); // Configure PB3/OC0 Pin as output pin

		}
		else  if ((Config_Ptr->mode) == NORMAL)
     f16:	e9 81       	ldd	r30, Y+1	; 0x01
     f18:	fa 81       	ldd	r31, Y+2	; 0x02
     f1a:	81 81       	ldd	r24, Z+1	; 0x01
     f1c:	88 23       	and	r24, r24
     f1e:	71 f4       	brne	.+28     	; 0xf3c <StartTimer+0xa2>
		{
			TCCR0 &= ~(1<<WGM01);
     f20:	a3 e5       	ldi	r26, 0x53	; 83
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e3 e5       	ldi	r30, 0x53	; 83
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	87 7f       	andi	r24, 0xF7	; 247
     f2c:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
     f2e:	a9 e5       	ldi	r26, 0x59	; 89
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e9 e5       	ldi	r30, 0x59	; 89
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	8c 93       	st	X, r24
		}
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <__vector_11>:
{
	Poll();
}

ISR(TIMER0_OVF_vect)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     f70:	80 91 94 01 	lds	r24, 0x0194
     f74:	90 91 95 01 	lds	r25, 0x0195
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	29 f0       	breq	.+10     	; 0xf86 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     f7c:	e0 91 94 01 	lds	r30, 0x0194
     f80:	f0 91 95 01 	lds	r31, 0x0195
     f84:	09 95       	icall
	}
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
     fd6:	80 91 94 01 	lds	r24, 0x0194
     fda:	90 91 95 01 	lds	r25, 0x0195
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	29 f0       	breq	.+10     	; 0xfec <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     fe2:	e0 91 94 01 	lds	r30, 0x0194
     fe6:	f0 91 95 01 	lds	r31, 0x0195
     fea:	09 95       	icall
	}
}
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <Handle_data>:
#include "std_types.h"
#include "lcd.h"


void Handle_data(float data)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <Handle_data+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <Handle_data+0x8>
    101a:	00 d0       	rcall	.+0      	; 0x101c <Handle_data+0xa>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	6b 83       	std	Y+3, r22	; 0x03
    1022:	7c 83       	std	Y+4, r23	; 0x04
    1024:	8d 83       	std	Y+5, r24	; 0x05
    1026:	9e 83       	std	Y+6, r25	; 0x06
	 LCD_displayString("Tempr: ");
    1028:	80 e6       	ldi	r24, 0x60	; 96
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	e6 d6       	rcall	.+3532   	; 0x1dfa <LCD_displayString>
    102e:	6b 81       	ldd	r22, Y+3	; 0x03
	 LCD_displayCharacter((uint8)data);
    1030:	7c 81       	ldd	r23, Y+4	; 0x04
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	2c d8       	rcall	.-4008   	; 0x90 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	ef d4       	rcall	.+2526   	; 0x1a1c <LCD_displayCharacter>
    103e:	1a 82       	std	Y+2, r1	; 0x02
    1040:	19 82       	std	Y+1, r1	; 0x01
    1042:	89 81       	ldd	r24, Y+1	; 0x01

	 for(int i =0; i< 10000000; i++);
    1044:	9a 81       	ldd	r25, Y+2	; 0x02
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	9a 83       	std	Y+2, r25	; 0x02
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	fa cf       	rjmp	.-12     	; 0x1042 <Handle_data+0x30>

0000104e <TC72_ReadTempr>:

  for(int i =0; i< 10000000; i++);
}
//------------------------------------------------------------------------------
int TC72_ReadTempr()
{ 
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <TC72_ReadTempr+0x6>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <TC72_ReadTempr+0x8>
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
  int temprMSB,temprLSB; 
    
  SPI_sendReceiveByte(TEMPR_REG);                  //Access Tempr register for reading
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	0e 94 28 13 	call	0x2650	; 0x2650 <SPI_sendReceiveByte>
  temprMSB = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	0e 94 28 13 	call	0x2650	; 0x2650 <SPI_sendReceiveByte>
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	8b 83       	std	Y+3, r24	; 0x03
  temprLSB = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	0e 94 28 13 	call	0x2650	; 0x2650 <SPI_sendReceiveByte>
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01


  
  return ( (temprMSB<<8) + temprLSB );
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	38 2f       	mov	r19, r24
    1082:	22 27       	eor	r18, r18
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
}
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <GetData>:
//------------------------------------------------------------------------------
float GetData(signed int tempr)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	27 97       	sbiw	r28, 0x07	; 7
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	9f 83       	std	Y+7, r25	; 0x07
    10b0:	8e 83       	std	Y+6, r24	; 0x06
  float result = (float)(tempr>>8);      //Discard LSByte (Only holds fraction flag bits)
    10b2:	8e 81       	ldd	r24, Y+6	; 0x06
    10b4:	9f 81       	ldd	r25, Y+7	; 0x07
    10b6:	89 2f       	mov	r24, r25
    10b8:	99 0f       	add	r25, r25
    10ba:	99 0b       	sbc	r25, r25
    10bc:	aa 27       	eor	r26, r26
    10be:	97 fd       	sbrc	r25, 7
    10c0:	a0 95       	com	r26
    10c2:	ba 2f       	mov	r27, r26
    10c4:	bc 01       	movw	r22, r24
    10c6:	cd 01       	movw	r24, r26
    10c8:	d4 db       	rcall	.-2136   	; 0x872 <__floatsisf>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	8a 83       	std	Y+2, r24	; 0x02
    10d0:	9b 83       	std	Y+3, r25	; 0x03
    10d2:	ac 83       	std	Y+4, r26	; 0x04
    10d4:	bd 83       	std	Y+5, r27	; 0x05
    10d6:	8e 81       	ldd	r24, Y+6	; 0x06
  char count = tempr & FRAC_FLAG;          
    10d8:	80 7c       	andi	r24, 0xC0	; 192
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
  
  if(count) 
    10de:	88 23       	and	r24, r24
    10e0:	41 f1       	breq	.+80     	; 0x1132 <GetData+0x98>
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
  {
    count = count >> 6; 
    10e4:	82 95       	swap	r24
    10e6:	86 95       	lsr	r24
    10e8:	86 95       	lsr	r24
    10ea:	83 70       	andi	r24, 0x03	; 3
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    result = result + (count * 0.25);
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	aa 27       	eor	r26, r26
    10f6:	97 fd       	sbrc	r25, 7
    10f8:	a0 95       	com	r26
    10fa:	ba 2f       	mov	r27, r26
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	b8 db       	rcall	.-2192   	; 0x872 <__floatsisf>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5e e3       	ldi	r21, 0x3E	; 62
    1112:	88 d9       	rcall	.-3312   	; 0x424 <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	9c 01       	movw	r18, r24
    111a:	ad 01       	movw	r20, r26
    111c:	6a 81       	ldd	r22, Y+2	; 0x02
    111e:	7b 81       	ldd	r23, Y+3	; 0x03
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	56 d9       	rcall	.-3412   	; 0x3d2 <__addsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	8a 83       	std	Y+2, r24	; 0x02
    112c:	9b 83       	std	Y+3, r25	; 0x03
    112e:	ac 83       	std	Y+4, r26	; 0x04
    1130:	bd 83       	std	Y+5, r27	; 0x05
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	ac 81       	ldd	r26, Y+4	; 0x04
    1138:	bd 81       	ldd	r27, Y+5	; 0x05
  }
  
  return  (result);
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	27 96       	adiw	r28, 0x07	; 7
    1140:	0f b6       	in	r0, 0x3f	; 63
}
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <GPIO_setupPinDirection+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <GPIO_setupPinDirection+0x8>
    1158:	0f 92       	push	r0
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	6a 83       	std	Y+2, r22	; 0x02
    1162:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	88 30       	cpi	r24, 0x08	; 8
    1168:	08 f0       	brcs	.+2      	; 0x116c <GPIO_setupPinDirection+0x1c>
    116a:	d5 c0       	rjmp	.+426    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	84 30       	cpi	r24, 0x04	; 4
    1170:	08 f0       	brcs	.+2      	; 0x1174 <GPIO_setupPinDirection+0x24>
    1172:	d1 c0       	rjmp	.+418    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3d 83       	std	Y+5, r19	; 0x05
    117c:	2c 83       	std	Y+4, r18	; 0x04
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	91 05       	cpc	r25, r1
    1186:	09 f4       	brne	.+2      	; 0x118a <GPIO_setupPinDirection+0x3a>
    1188:	43 c0       	rjmp	.+134    	; 0x1210 <GPIO_setupPinDirection+0xc0>
    118a:	2c 81       	ldd	r18, Y+4	; 0x04
    118c:	3d 81       	ldd	r19, Y+5	; 0x05
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	2c f4       	brge	.+10     	; 0x119e <GPIO_setupPinDirection+0x4e>
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	9d 81       	ldd	r25, Y+5	; 0x05
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	71 f0       	breq	.+28     	; 0x11b8 <GPIO_setupPinDirection+0x68>
    119c:	bc c0       	rjmp	.+376    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
    119e:	2c 81       	ldd	r18, Y+4	; 0x04
    11a0:	3d 81       	ldd	r19, Y+5	; 0x05
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <GPIO_setupPinDirection+0x5a>
    11a8:	5f c0       	rjmp	.+190    	; 0x1268 <GPIO_setupPinDirection+0x118>
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	9d 81       	ldd	r25, Y+5	; 0x05
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	91 05       	cpc	r25, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <GPIO_setupPinDirection+0x66>
    11b4:	85 c0       	rjmp	.+266    	; 0x12c0 <GPIO_setupPinDirection+0x170>
    11b6:	af c0       	rjmp	.+350    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	a1 f4       	brne	.+40     	; 0x11e6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    11be:	aa e3       	ldi	r26, 0x3A	; 58
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ea e3       	ldi	r30, 0x3A	; 58
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_setupPinDirection+0x8c>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_setupPinDirection+0x88>
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	98 c0       	rjmp	.+304    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11e6:	aa e3       	ldi	r26, 0x3A	; 58
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ea e3       	ldi	r30, 0x3A	; 58
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <GPIO_setupPinDirection+0xb4>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <GPIO_setupPinDirection+0xb0>
    1208:	80 95       	com	r24
    120a:	84 23       	and	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	83 c0       	rjmp	.+262    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	a1 f4       	brne	.+40     	; 0x123e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1216:	a7 e3       	ldi	r26, 0x37	; 55
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e7 e3       	ldi	r30, 0x37	; 55
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <GPIO_setupPinDirection+0xe4>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <GPIO_setupPinDirection+0xe0>
    1238:	84 2b       	or	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	6c c0       	rjmp	.+216    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    123e:	a7 e3       	ldi	r26, 0x37	; 55
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e7 e3       	ldi	r30, 0x37	; 55
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <GPIO_setupPinDirection+0x10c>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <GPIO_setupPinDirection+0x108>
    1260:	80 95       	com	r24
    1262:	84 23       	and	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	57 c0       	rjmp	.+174    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	a1 f4       	brne	.+40     	; 0x1296 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    126e:	a4 e3       	ldi	r26, 0x34	; 52
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_setupPinDirection+0x13c>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_setupPinDirection+0x138>
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	40 c0       	rjmp	.+128    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1296:	a4 e3       	ldi	r26, 0x34	; 52
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e4 e3       	ldi	r30, 0x34	; 52
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <GPIO_setupPinDirection+0x164>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <GPIO_setupPinDirection+0x160>
    12b8:	80 95       	com	r24
    12ba:	84 23       	and	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	2b c0       	rjmp	.+86     	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	a1 f4       	brne	.+40     	; 0x12ee <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12c6:	a1 e3       	ldi	r26, 0x31	; 49
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e1 e3       	ldi	r30, 0x31	; 49
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <GPIO_setupPinDirection+0x194>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <GPIO_setupPinDirection+0x190>
    12e8:	84 2b       	or	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12ee:	a1 e3       	ldi	r26, 0x31	; 49
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e1 e3       	ldi	r30, 0x31	; 49
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <GPIO_setupPinDirection+0x1bc>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <GPIO_setupPinDirection+0x1b8>
    1310:	80 95       	com	r24
    1312:	84 23       	and	r24, r20
    1314:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <GPIO_writePin+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <GPIO_writePin+0x8>
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	6a 83       	std	Y+2, r22	; 0x02
    1338:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	88 30       	cpi	r24, 0x08	; 8
    133e:	08 f0       	brcs	.+2      	; 0x1342 <GPIO_writePin+0x1c>
    1340:	d5 c0       	rjmp	.+426    	; 0x14ec <GPIO_writePin+0x1c6>
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	08 f0       	brcs	.+2      	; 0x134a <GPIO_writePin+0x24>
    1348:	d1 c0       	rjmp	.+418    	; 0x14ec <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3d 83       	std	Y+5, r19	; 0x05
    1352:	2c 83       	std	Y+4, r18	; 0x04
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <GPIO_writePin+0x3a>
    135e:	43 c0       	rjmp	.+134    	; 0x13e6 <GPIO_writePin+0xc0>
    1360:	2c 81       	ldd	r18, Y+4	; 0x04
    1362:	3d 81       	ldd	r19, Y+5	; 0x05
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	2c f4       	brge	.+10     	; 0x1374 <GPIO_writePin+0x4e>
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	71 f0       	breq	.+28     	; 0x138e <GPIO_writePin+0x68>
    1372:	bc c0       	rjmp	.+376    	; 0x14ec <GPIO_writePin+0x1c6>
    1374:	2c 81       	ldd	r18, Y+4	; 0x04
    1376:	3d 81       	ldd	r19, Y+5	; 0x05
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <GPIO_writePin+0x5a>
    137e:	5f c0       	rjmp	.+190    	; 0x143e <GPIO_writePin+0x118>
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <GPIO_writePin+0x66>
    138a:	85 c0       	rjmp	.+266    	; 0x1496 <GPIO_writePin+0x170>
    138c:	af c0       	rjmp	.+350    	; 0x14ec <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	a1 f4       	brne	.+40     	; 0x13bc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1394:	ab e3       	ldi	r26, 0x3B	; 59
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	eb e3       	ldi	r30, 0x3B	; 59
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <GPIO_writePin+0x8c>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <GPIO_writePin+0x88>
    13b6:	84 2b       	or	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	98 c0       	rjmp	.+304    	; 0x14ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    13bc:	ab e3       	ldi	r26, 0x3B	; 59
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	eb e3       	ldi	r30, 0x3B	; 59
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <GPIO_writePin+0xb4>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <GPIO_writePin+0xb0>
    13de:	80 95       	com	r24
    13e0:	84 23       	and	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	83 c0       	rjmp	.+262    	; 0x14ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	a1 f4       	brne	.+40     	; 0x1414 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13ec:	a8 e3       	ldi	r26, 0x38	; 56
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e8 e3       	ldi	r30, 0x38	; 56
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <GPIO_writePin+0xe4>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <GPIO_writePin+0xe0>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	6c c0       	rjmp	.+216    	; 0x14ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1414:	a8 e3       	ldi	r26, 0x38	; 56
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e8 e3       	ldi	r30, 0x38	; 56
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <GPIO_writePin+0x10c>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <GPIO_writePin+0x108>
    1436:	80 95       	com	r24
    1438:	84 23       	and	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	57 c0       	rjmp	.+174    	; 0x14ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	a1 f4       	brne	.+40     	; 0x146c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1444:	a5 e3       	ldi	r26, 0x35	; 53
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e5 e3       	ldi	r30, 0x35	; 53
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <GPIO_writePin+0x13c>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <GPIO_writePin+0x138>
    1466:	84 2b       	or	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	40 c0       	rjmp	.+128    	; 0x14ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    146c:	a5 e3       	ldi	r26, 0x35	; 53
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e5 e3       	ldi	r30, 0x35	; 53
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 2e       	mov	r0, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <GPIO_writePin+0x164>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <GPIO_writePin+0x160>
    148e:	80 95       	com	r24
    1490:	84 23       	and	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	2b c0       	rjmp	.+86     	; 0x14ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	a1 f4       	brne	.+40     	; 0x14c4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    149c:	a2 e3       	ldi	r26, 0x32	; 50
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e2 e3       	ldi	r30, 0x32	; 50
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_writePin+0x194>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_writePin+0x190>
    14be:	84 2b       	or	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    14c4:	a2 e3       	ldi	r26, 0x32	; 50
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e2 e3       	ldi	r30, 0x32	; 50
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <GPIO_writePin+0x1bc>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <GPIO_writePin+0x1b8>
    14e6:	80 95       	com	r24
    14e8:	84 23       	and	r24, r20
    14ea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <GPIO_setupPortDirection+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <GPIO_setupPortDirection+0x8>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	90 f5       	brcc	.+100    	; 0x1576 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3c 83       	std	Y+4, r19	; 0x04
    151a:	2b 83       	std	Y+3, r18	; 0x03
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	91 05       	cpc	r25, r1
    1524:	d1 f0       	breq	.+52     	; 0x155a <GPIO_setupPortDirection+0x5e>
    1526:	2b 81       	ldd	r18, Y+3	; 0x03
    1528:	3c 81       	ldd	r19, Y+4	; 0x04
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	2c f4       	brge	.+10     	; 0x153a <GPIO_setupPortDirection+0x3e>
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	61 f0       	breq	.+24     	; 0x1550 <GPIO_setupPortDirection+0x54>
    1538:	1e c0       	rjmp	.+60     	; 0x1576 <GPIO_setupPortDirection+0x7a>
    153a:	2b 81       	ldd	r18, Y+3	; 0x03
    153c:	3c 81       	ldd	r19, Y+4	; 0x04
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	81 f0       	breq	.+32     	; 0x1564 <GPIO_setupPortDirection+0x68>
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	91 05       	cpc	r25, r1
    154c:	81 f0       	breq	.+32     	; 0x156e <GPIO_setupPortDirection+0x72>
    154e:	13 c0       	rjmp	.+38     	; 0x1576 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1550:	ea e3       	ldi	r30, 0x3A	; 58
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	80 83       	st	Z, r24
    1558:	0e c0       	rjmp	.+28     	; 0x1576 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    155a:	e7 e3       	ldi	r30, 0x37	; 55
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	80 83       	st	Z, r24
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1564:	e4 e3       	ldi	r30, 0x34	; 52
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	80 83       	st	Z, r24
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    156e:	e1 e3       	ldi	r30, 0x31	; 49
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	80 83       	st	Z, r24
			break;
		}
	}
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <GPIO_writePort+0x6>
    158a:	00 d0       	rcall	.+0      	; 0x158c <GPIO_writePort+0x8>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	84 30       	cpi	r24, 0x04	; 4
    1598:	90 f5       	brcc	.+100    	; 0x15fe <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3c 83       	std	Y+4, r19	; 0x04
    15a2:	2b 83       	std	Y+3, r18	; 0x03
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	91 05       	cpc	r25, r1
    15ac:	d1 f0       	breq	.+52     	; 0x15e2 <GPIO_writePort+0x5e>
    15ae:	2b 81       	ldd	r18, Y+3	; 0x03
    15b0:	3c 81       	ldd	r19, Y+4	; 0x04
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	2c f4       	brge	.+10     	; 0x15c2 <GPIO_writePort+0x3e>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	61 f0       	breq	.+24     	; 0x15d8 <GPIO_writePort+0x54>
    15c0:	1e c0       	rjmp	.+60     	; 0x15fe <GPIO_writePort+0x7a>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	81 f0       	breq	.+32     	; 0x15ec <GPIO_writePort+0x68>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	83 30       	cpi	r24, 0x03	; 3
    15d2:	91 05       	cpc	r25, r1
    15d4:	81 f0       	breq	.+32     	; 0x15f6 <GPIO_writePort+0x72>
    15d6:	13 c0       	rjmp	.+38     	; 0x15fe <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15d8:	eb e3       	ldi	r30, 0x3B	; 59
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	80 83       	st	Z, r24
    15e0:	0e c0       	rjmp	.+28     	; 0x15fe <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15e2:	e8 e3       	ldi	r30, 0x38	; 56
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	80 83       	st	Z, r24
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15ec:	e5 e3       	ldi	r30, 0x35	; 53
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	80 83       	st	Z, r24
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15f6:	e2 e3       	ldi	r30, 0x32	; 50
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	64 e0       	ldi	r22, 0x04	; 4
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	9a dd       	rcall	.-1228   	; 0x1150 <GPIO_setupPinDirection>
    161c:	83 e0       	ldi	r24, 0x03	; 3
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    161e:	65 e0       	ldi	r22, 0x05	; 5
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	96 dd       	rcall	.-1236   	; 0x1150 <GPIO_setupPinDirection>
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	66 e0       	ldi	r22, 0x06	; 6
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	92 dd       	rcall	.-1244   	; 0x1150 <GPIO_setupPinDirection>
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	6f ef       	ldi	r22, 0xFF	; 255
    1630:	65 df       	rcall	.-310    	; 0x14fc <GPIO_setupPortDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1632:	88 e3       	ldi	r24, 0x38	; 56
    1634:	07 d0       	rcall	.+14     	; 0x1644 <LCD_sendCommand>
    1636:	8c e0       	ldi	r24, 0x0C	; 12
    1638:	05 d0       	rcall	.+10     	; 0x1644 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	03 d0       	rcall	.+6      	; 0x1644 <LCD_sendCommand>
    163e:	cf 91       	pop	r28
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	e9 97       	sbiw	r28, 0x39	; 57
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	64 e0       	ldi	r22, 0x04	; 4
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	62 de       	rcall	.-828    	; 0x1326 <GPIO_writePin>
    1662:	83 e0       	ldi	r24, 0x03	; 3
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1664:	65 e0       	ldi	r22, 0x05	; 5
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	5e de       	rcall	.-836    	; 0x1326 <GPIO_writePin>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 e8       	ldi	r26, 0x80	; 128
    1670:	bf e3       	ldi	r27, 0x3F	; 63
    1672:	8d ab       	std	Y+53, r24	; 0x35
    1674:	9e ab       	std	Y+54, r25	; 0x36
    1676:	af ab       	std	Y+55, r26	; 0x37
    1678:	b8 af       	std	Y+56, r27	; 0x38
    167a:	6d a9       	ldd	r22, Y+53	; 0x35
    167c:	7e a9       	ldd	r23, Y+54	; 0x36
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	8f a9       	ldd	r24, Y+55	; 0x37
    1680:	98 ad       	ldd	r25, Y+56	; 0x38
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a e7       	ldi	r20, 0x7A	; 122
    1688:	53 e4       	ldi	r21, 0x43	; 67
    168a:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	89 ab       	std	Y+49, r24	; 0x31
    1694:	9a ab       	std	Y+50, r25	; 0x32
    1696:	ab ab       	std	Y+51, r26	; 0x33
    1698:	bc ab       	std	Y+52, r27	; 0x34
    169a:	69 a9       	ldd	r22, Y+49	; 0x31
    169c:	7a a9       	ldd	r23, Y+50	; 0x32
	if (__tmp < 1.0)
    169e:	8b a9       	ldd	r24, Y+51	; 0x33
    16a0:	9c a9       	ldd	r25, Y+52	; 0x34
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e8       	ldi	r20, 0x80	; 128
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	b6 d8       	rcall	.-3732   	; 0x818 <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	2c f4       	brge	.+10     	; 0x16ba <LCD_sendCommand+0x76>
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	98 ab       	std	Y+48, r25	; 0x30
		__ticks = 1;
    16b6:	8f a7       	std	Y+47, r24	; 0x2f
    16b8:	3e c0       	rjmp	.+124    	; 0x1736 <LCD_sendCommand+0xf2>
    16ba:	69 a9       	ldd	r22, Y+49	; 0x31
    16bc:	7a a9       	ldd	r23, Y+50	; 0x32
    16be:	8b a9       	ldd	r24, Y+51	; 0x33
	else if (__tmp > 65535)
    16c0:	9c a9       	ldd	r25, Y+52	; 0x34
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	3f ef       	ldi	r19, 0xFF	; 255
    16c6:	4f e7       	ldi	r20, 0x7F	; 127
    16c8:	57 e4       	ldi	r21, 0x47	; 71
    16ca:	4c d8       	rcall	.-3944   	; 0x764 <__gtsf2>
    16cc:	18 16       	cp	r1, r24
    16ce:	4c f5       	brge	.+82     	; 0x1722 <LCD_sendCommand+0xde>
    16d0:	6d a9       	ldd	r22, Y+53	; 0x35
    16d2:	7e a9       	ldd	r23, Y+54	; 0x36
    16d4:	8f a9       	ldd	r24, Y+55	; 0x37
    16d6:	98 ad       	ldd	r25, Y+56	; 0x38
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e2       	ldi	r20, 0x20	; 32
    16de:	51 e4       	ldi	r21, 0x41	; 65
    16e0:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	98 ab       	std	Y+48, r25	; 0x30
    16f6:	8f a7       	std	Y+47, r24	; 0x2f
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <LCD_sendCommand+0xd4>
    16fa:	89 e1       	ldi	r24, 0x19	; 25
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9e a7       	std	Y+46, r25	; 0x2e
    1700:	8d a7       	std	Y+45, r24	; 0x2d
    1702:	8d a5       	ldd	r24, Y+45	; 0x2d
    1704:	9e a5       	ldd	r25, Y+46	; 0x2e
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <LCD_sendCommand+0xc2>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    170a:	9e a7       	std	Y+46, r25	; 0x2e
    170c:	8d a7       	std	Y+45, r24	; 0x2d
    170e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1710:	98 a9       	ldd	r25, Y+48	; 0x30
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	98 ab       	std	Y+48, r25	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	8f a7       	std	Y+47, r24	; 0x2f
    1718:	8f a5       	ldd	r24, Y+47	; 0x2f
    171a:	98 a9       	ldd	r25, Y+48	; 0x30
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	69 f7       	brne	.-38     	; 0x16fa <LCD_sendCommand+0xb6>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1720:	14 c0       	rjmp	.+40     	; 0x174a <LCD_sendCommand+0x106>
    1722:	69 a9       	ldd	r22, Y+49	; 0x31
    1724:	7a a9       	ldd	r23, Y+50	; 0x32
    1726:	8b a9       	ldd	r24, Y+51	; 0x33
    1728:	9c a9       	ldd	r25, Y+52	; 0x34
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172a:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	98 ab       	std	Y+48, r25	; 0x30
    1734:	8f a7       	std	Y+47, r24	; 0x2f
    1736:	8f a5       	ldd	r24, Y+47	; 0x2f
    1738:	98 a9       	ldd	r25, Y+48	; 0x30
    173a:	9c a7       	std	Y+44, r25	; 0x2c
    173c:	8b a7       	std	Y+43, r24	; 0x2b
    173e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1740:	9c a5       	ldd	r25, Y+44	; 0x2c
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_sendCommand+0xfe>
    1746:	9c a7       	std	Y+44, r25	; 0x2c
    1748:	8b a7       	std	Y+43, r24	; 0x2b
    174a:	83 e0       	ldi	r24, 0x03	; 3
    174c:	66 e0       	ldi	r22, 0x06	; 6
    174e:	41 e0       	ldi	r20, 0x01	; 1
    1750:	ea dd       	rcall	.-1068   	; 0x1326 <GPIO_writePin>
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e8       	ldi	r26, 0x80	; 128
    1758:	bf e3       	ldi	r27, 0x3F	; 63
    175a:	8f a3       	std	Y+39, r24	; 0x27
    175c:	98 a7       	std	Y+40, r25	; 0x28
    175e:	a9 a7       	std	Y+41, r26	; 0x29
    1760:	ba a7       	std	Y+42, r27	; 0x2a
    1762:	6f a1       	ldd	r22, Y+39	; 0x27
    1764:	78 a5       	ldd	r23, Y+40	; 0x28
    1766:	89 a5       	ldd	r24, Y+41	; 0x29
    1768:	9a a5       	ldd	r25, Y+42	; 0x2a
    176a:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a e7       	ldi	r20, 0x7A	; 122
    1770:	53 e4       	ldi	r21, 0x43	; 67
    1772:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	8b a3       	std	Y+35, r24	; 0x23
    177c:	9c a3       	std	Y+36, r25	; 0x24
    177e:	ad a3       	std	Y+37, r26	; 0x25
    1780:	be a3       	std	Y+38, r27	; 0x26
    1782:	6b a1       	ldd	r22, Y+35	; 0x23
    1784:	7c a1       	ldd	r23, Y+36	; 0x24
    1786:	8d a1       	ldd	r24, Y+37	; 0x25
    1788:	9e a1       	ldd	r25, Y+38	; 0x26
    178a:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e8       	ldi	r20, 0x80	; 128
    1790:	5f e3       	ldi	r21, 0x3F	; 63
    1792:	42 d8       	rcall	.-3964   	; 0x818 <__ltsf2>
    1794:	88 23       	and	r24, r24
    1796:	2c f4       	brge	.+10     	; 0x17a2 <LCD_sendCommand+0x15e>
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9a a3       	std	Y+34, r25	; 0x22
    179e:	89 a3       	std	Y+33, r24	; 0x21
    17a0:	3f c0       	rjmp	.+126    	; 0x1820 <LCD_sendCommand+0x1dc>
    17a2:	6b a1       	ldd	r22, Y+35	; 0x23
		__ticks = 1;
    17a4:	7c a1       	ldd	r23, Y+36	; 0x24
    17a6:	8d a1       	ldd	r24, Y+37	; 0x25
    17a8:	9e a1       	ldd	r25, Y+38	; 0x26
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
    17ae:	4f e7       	ldi	r20, 0x7F	; 127
    17b0:	57 e4       	ldi	r21, 0x47	; 71
    17b2:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	4c f5       	brge	.+82     	; 0x180c <LCD_sendCommand+0x1c8>
    17ba:	6f a1       	ldd	r22, Y+39	; 0x27
    17bc:	78 a5       	ldd	r23, Y+40	; 0x28
    17be:	89 a5       	ldd	r24, Y+41	; 0x29
    17c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c6:	40 e2       	ldi	r20, 0x20	; 32
    17c8:	51 e4       	ldi	r21, 0x41	; 65
    17ca:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	bc 01       	movw	r22, r24
    17d4:	cd 01       	movw	r24, r26
    17d6:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9a a3       	std	Y+34, r25	; 0x22
    17e0:	89 a3       	std	Y+33, r24	; 0x21
    17e2:	0f c0       	rjmp	.+30     	; 0x1802 <LCD_sendCommand+0x1be>
    17e4:	89 e1       	ldi	r24, 0x19	; 25
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	98 a3       	std	Y+32, r25	; 0x20
    17ea:	8f 8f       	std	Y+31, r24	; 0x1f
    17ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17ee:	98 a1       	ldd	r25, Y+32	; 0x20
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_sendCommand+0x1ac>
    17f4:	98 a3       	std	Y+32, r25	; 0x20
    17f6:	8f 8f       	std	Y+31, r24	; 0x1f
    17f8:	89 a1       	ldd	r24, Y+33	; 0x21
    17fa:	9a a1       	ldd	r25, Y+34	; 0x22
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	9a a3       	std	Y+34, r25	; 0x22
    1800:	89 a3       	std	Y+33, r24	; 0x21
    1802:	89 a1       	ldd	r24, Y+33	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1804:	9a a1       	ldd	r25, Y+34	; 0x22
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	69 f7       	brne	.-38     	; 0x17e4 <LCD_sendCommand+0x1a0>
    180a:	14 c0       	rjmp	.+40     	; 0x1834 <LCD_sendCommand+0x1f0>
    180c:	6b a1       	ldd	r22, Y+35	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180e:	7c a1       	ldd	r23, Y+36	; 0x24
    1810:	8d a1       	ldd	r24, Y+37	; 0x25
    1812:	9e a1       	ldd	r25, Y+38	; 0x26
    1814:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9a a3       	std	Y+34, r25	; 0x22
    181e:	89 a3       	std	Y+33, r24	; 0x21
    1820:	89 a1       	ldd	r24, Y+33	; 0x21
    1822:	9a a1       	ldd	r25, Y+34	; 0x22
    1824:	9e 8f       	std	Y+30, r25	; 0x1e
    1826:	8d 8f       	std	Y+29, r24	; 0x1d
    1828:	8d 8d       	ldd	r24, Y+29	; 0x1d
    182a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <LCD_sendCommand+0x1e8>
    1830:	9e 8f       	std	Y+30, r25	; 0x1e
    1832:	8d 8f       	std	Y+29, r24	; 0x1d
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	69 ad       	ldd	r22, Y+57	; 0x39
    1838:	a5 de       	rcall	.-694    	; 0x1584 <GPIO_writePort>
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	a0 e8       	ldi	r26, 0x80	; 128
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1840:	bf e3       	ldi	r27, 0x3F	; 63
    1842:	89 8f       	std	Y+25, r24	; 0x19
    1844:	9a 8f       	std	Y+26, r25	; 0x1a
    1846:	ab 8f       	std	Y+27, r26	; 0x1b
    1848:	bc 8f       	std	Y+28, r27	; 0x1c
    184a:	69 8d       	ldd	r22, Y+25	; 0x19
    184c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    184e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4a e7       	ldi	r20, 0x7A	; 122
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	53 e4       	ldi	r21, 0x43	; 67
    185a:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	8d 8b       	std	Y+21, r24	; 0x15
    1864:	9e 8b       	std	Y+22, r25	; 0x16
    1866:	af 8b       	std	Y+23, r26	; 0x17
    1868:	b8 8f       	std	Y+24, r27	; 0x18
    186a:	6d 89       	ldd	r22, Y+21	; 0x15
    186c:	7e 89       	ldd	r23, Y+22	; 0x16
    186e:	8f 89       	ldd	r24, Y+23	; 0x17
    1870:	98 8d       	ldd	r25, Y+24	; 0x18
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
    1878:	5f e3       	ldi	r21, 0x3F	; 63
    187a:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    187e:	88 23       	and	r24, r24
    1880:	2c f4       	brge	.+10     	; 0x188c <LCD_sendCommand+0x248>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
    188a:	3f c0       	rjmp	.+126    	; 0x190a <LCD_sendCommand+0x2c6>
    188c:	6d 89       	ldd	r22, Y+21	; 0x15
    188e:	7e 89       	ldd	r23, Y+22	; 0x16
		__ticks = 1;
    1890:	8f 89       	ldd	r24, Y+23	; 0x17
    1892:	98 8d       	ldd	r25, Y+24	; 0x18
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
    189a:	57 e4       	ldi	r21, 0x47	; 71
    189c:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    18a0:	18 16       	cp	r1, r24
    18a2:	4c f5       	brge	.+82     	; 0x18f6 <LCD_sendCommand+0x2b2>
    18a4:	69 8d       	ldd	r22, Y+25	; 0x19
    18a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9c 8b       	std	Y+20, r25	; 0x14
    18ca:	8b 8b       	std	Y+19, r24	; 0x13
    18cc:	0f c0       	rjmp	.+30     	; 0x18ec <LCD_sendCommand+0x2a8>
    18ce:	89 e1       	ldi	r24, 0x19	; 25
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9a 8b       	std	Y+18, r25	; 0x12
    18d4:	89 8b       	std	Y+17, r24	; 0x11
    18d6:	89 89       	ldd	r24, Y+17	; 0x11
    18d8:	9a 89       	ldd	r25, Y+18	; 0x12
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_sendCommand+0x296>
    18de:	9a 8b       	std	Y+18, r25	; 0x12
    18e0:	89 8b       	std	Y+17, r24	; 0x11
    18e2:	8b 89       	ldd	r24, Y+19	; 0x13
    18e4:	9c 89       	ldd	r25, Y+20	; 0x14
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	9c 8b       	std	Y+20, r25	; 0x14
    18ea:	8b 8b       	std	Y+19, r24	; 0x13
    18ec:	8b 89       	ldd	r24, Y+19	; 0x13
    18ee:	9c 89       	ldd	r25, Y+20	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	69 f7       	brne	.-38     	; 0x18ce <LCD_sendCommand+0x28a>
    18f4:	14 c0       	rjmp	.+40     	; 0x191e <LCD_sendCommand+0x2da>
    18f6:	6d 89       	ldd	r22, Y+21	; 0x15
    18f8:	7e 89       	ldd	r23, Y+22	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	8f 89       	ldd	r24, Y+23	; 0x17
    18fc:	98 8d       	ldd	r25, Y+24	; 0x18
    18fe:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	cb 01       	movw	r24, r22
    1906:	9c 8b       	std	Y+20, r25	; 0x14
    1908:	8b 8b       	std	Y+19, r24	; 0x13
    190a:	8b 89       	ldd	r24, Y+19	; 0x13
    190c:	9c 89       	ldd	r25, Y+20	; 0x14
    190e:	98 8b       	std	Y+16, r25	; 0x10
    1910:	8f 87       	std	Y+15, r24	; 0x0f
    1912:	8f 85       	ldd	r24, Y+15	; 0x0f
    1914:	98 89       	ldd	r25, Y+16	; 0x10
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <LCD_sendCommand+0x2d2>
    191a:	98 8b       	std	Y+16, r25	; 0x10
    191c:	8f 87       	std	Y+15, r24	; 0x0f
    191e:	83 e0       	ldi	r24, 0x03	; 3
    1920:	66 e0       	ldi	r22, 0x06	; 6
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	00 dd       	rcall	.-1536   	; 0x1326 <GPIO_writePin>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 e8       	ldi	r26, 0x80	; 128
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    192c:	bf e3       	ldi	r27, 0x3F	; 63
    192e:	8b 87       	std	Y+11, r24	; 0x0b
    1930:	9c 87       	std	Y+12, r25	; 0x0c
    1932:	ad 87       	std	Y+13, r26	; 0x0d
    1934:	be 87       	std	Y+14, r27	; 0x0e
    1936:	6b 85       	ldd	r22, Y+11	; 0x0b
    1938:	7c 85       	ldd	r23, Y+12	; 0x0c
    193a:	8d 85       	ldd	r24, Y+13	; 0x0d
    193c:	9e 85       	ldd	r25, Y+14	; 0x0e
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a e7       	ldi	r20, 0x7A	; 122
    1944:	53 e4       	ldi	r21, 0x43	; 67
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1946:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8f 83       	std	Y+7, r24	; 0x07
    1950:	98 87       	std	Y+8, r25	; 0x08
    1952:	a9 87       	std	Y+9, r26	; 0x09
    1954:	ba 87       	std	Y+10, r27	; 0x0a
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
	if (__tmp < 1.0)
    1966:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	2c f4       	brge	.+10     	; 0x1978 <LCD_sendCommand+0x334>
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	3f c0       	rjmp	.+126    	; 0x19f6 <LCD_sendCommand+0x3b2>
    1978:	6f 81       	ldd	r22, Y+7	; 0x07
    197a:	78 85       	ldd	r23, Y+8	; 0x08
    197c:	89 85       	ldd	r24, Y+9	; 0x09
		__ticks = 1;
    197e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
	else if (__tmp > 65535)
    1988:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	4c f5       	brge	.+82     	; 0x19e2 <LCD_sendCommand+0x39e>
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a0:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <LCD_sendCommand+0x394>
    19ba:	89 e1       	ldi	r24, 0x19	; 25
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_sendCommand+0x382>
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	00 97       	sbiw	r24, 0x00	; 0
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19de:	69 f7       	brne	.-38     	; 0x19ba <LCD_sendCommand+0x376>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <LCD_sendCommand+0x3c6>
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ea:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_sendCommand+0x3be>
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	e9 96       	adiw	r28, 0x39	; 57
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1a1a:	08 95       	ret

00001a1c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	e9 97       	sbiw	r28, 0x39	; 57
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a32:	83 e0       	ldi	r24, 0x03	; 3
    1a34:	64 e0       	ldi	r22, 0x04	; 4
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	76 dc       	rcall	.-1812   	; 0x1326 <GPIO_writePin>
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1a3c:	65 e0       	ldi	r22, 0x05	; 5
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	72 dc       	rcall	.-1820   	; 0x1326 <GPIO_writePin>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	a0 e8       	ldi	r26, 0x80	; 128
    1a48:	bf e3       	ldi	r27, 0x3F	; 63
    1a4a:	8d ab       	std	Y+53, r24	; 0x35
    1a4c:	9e ab       	std	Y+54, r25	; 0x36
    1a4e:	af ab       	std	Y+55, r26	; 0x37
    1a50:	b8 af       	std	Y+56, r27	; 0x38
    1a52:	6d a9       	ldd	r22, Y+53	; 0x35
    1a54:	7e a9       	ldd	r23, Y+54	; 0x36
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a56:	8f a9       	ldd	r24, Y+55	; 0x37
    1a58:	98 ad       	ldd	r25, Y+56	; 0x38
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a e7       	ldi	r20, 0x7A	; 122
    1a60:	53 e4       	ldi	r21, 0x43	; 67
    1a62:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	89 ab       	std	Y+49, r24	; 0x31
    1a6c:	9a ab       	std	Y+50, r25	; 0x32
    1a6e:	ab ab       	std	Y+51, r26	; 0x33
    1a70:	bc ab       	std	Y+52, r27	; 0x34
    1a72:	69 a9       	ldd	r22, Y+49	; 0x31
    1a74:	7a a9       	ldd	r23, Y+50	; 0x32
	if (__tmp < 1.0)
    1a76:	8b a9       	ldd	r24, Y+51	; 0x33
    1a78:	9c a9       	ldd	r25, Y+52	; 0x34
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    1a86:	88 23       	and	r24, r24
    1a88:	2c f4       	brge	.+10     	; 0x1a94 <LCD_displayCharacter+0x78>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
    1a8e:	98 ab       	std	Y+48, r25	; 0x30
    1a90:	8f a7       	std	Y+47, r24	; 0x2f
    1a92:	3f c0       	rjmp	.+126    	; 0x1b12 <LCD_displayCharacter+0xf6>
    1a94:	69 a9       	ldd	r22, Y+49	; 0x31
    1a96:	7a a9       	ldd	r23, Y+50	; 0x32
	else if (__tmp > 65535)
    1a98:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	3f ef       	ldi	r19, 0xFF	; 255
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	57 e4       	ldi	r21, 0x47	; 71
    1aa4:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	4c f5       	brge	.+82     	; 0x1afe <LCD_displayCharacter+0xe2>
    1aac:	6d a9       	ldd	r22, Y+53	; 0x35
    1aae:	7e a9       	ldd	r23, Y+54	; 0x36
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e2       	ldi	r20, 0x20	; 32
    1aba:	51 e4       	ldi	r21, 0x41	; 65
    1abc:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	98 ab       	std	Y+48, r25	; 0x30
    1ad2:	8f a7       	std	Y+47, r24	; 0x2f
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <LCD_displayCharacter+0xd8>
    1ad6:	89 e1       	ldi	r24, 0x19	; 25
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9e a7       	std	Y+46, r25	; 0x2e
    1adc:	8d a7       	std	Y+45, r24	; 0x2d
    1ade:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ae0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <LCD_displayCharacter+0xc6>
    1ae6:	9e a7       	std	Y+46, r25	; 0x2e
    1ae8:	8d a7       	std	Y+45, r24	; 0x2d
    1aea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aec:	98 a9       	ldd	r25, Y+48	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	98 ab       	std	Y+48, r25	; 0x30
    1af2:	8f a7       	std	Y+47, r24	; 0x2f
    1af4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af6:	98 a9       	ldd	r25, Y+48	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	69 f7       	brne	.-38     	; 0x1ad6 <LCD_displayCharacter+0xba>
    1afc:	14 c0       	rjmp	.+40     	; 0x1b26 <LCD_displayCharacter+0x10a>
    1afe:	69 a9       	ldd	r22, Y+49	; 0x31
    1b00:	7a a9       	ldd	r23, Y+50	; 0x32
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	8b a9       	ldd	r24, Y+51	; 0x33
    1b04:	9c a9       	ldd	r25, Y+52	; 0x34
    1b06:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	98 ab       	std	Y+48, r25	; 0x30
    1b10:	8f a7       	std	Y+47, r24	; 0x2f
    1b12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b14:	98 a9       	ldd	r25, Y+48	; 0x30
    1b16:	9c a7       	std	Y+44, r25	; 0x2c
    1b18:	8b a7       	std	Y+43, r24	; 0x2b
    1b1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <LCD_displayCharacter+0x102>
    1b22:	9c a7       	std	Y+44, r25	; 0x2c
    1b24:	8b a7       	std	Y+43, r24	; 0x2b
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	66 e0       	ldi	r22, 0x06	; 6
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	fc db       	rcall	.-2056   	; 0x1326 <GPIO_writePin>
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a0 e8       	ldi	r26, 0x80	; 128
    1b34:	bf e3       	ldi	r27, 0x3F	; 63
    1b36:	8f a3       	std	Y+39, r24	; 0x27
    1b38:	98 a7       	std	Y+40, r25	; 0x28
    1b3a:	a9 a7       	std	Y+41, r26	; 0x29
    1b3c:	ba a7       	std	Y+42, r27	; 0x2a
    1b3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b40:	78 a5       	ldd	r23, Y+40	; 0x28
    1b42:	89 a5       	ldd	r24, Y+41	; 0x29
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b44:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	4a e7       	ldi	r20, 0x7A	; 122
    1b4c:	53 e4       	ldi	r21, 0x43	; 67
    1b4e:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	8b a3       	std	Y+35, r24	; 0x23
    1b58:	9c a3       	std	Y+36, r25	; 0x24
    1b5a:	ad a3       	std	Y+37, r26	; 0x25
    1b5c:	be a3       	std	Y+38, r27	; 0x26
    1b5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b60:	7c a1       	ldd	r23, Y+36	; 0x24
    1b62:	8d a1       	ldd	r24, Y+37	; 0x25
	if (__tmp < 1.0)
    1b64:	9e a1       	ldd	r25, Y+38	; 0x26
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e8       	ldi	r20, 0x80	; 128
    1b6c:	5f e3       	ldi	r21, 0x3F	; 63
    1b6e:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    1b72:	88 23       	and	r24, r24
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <LCD_displayCharacter+0x164>
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9a a3       	std	Y+34, r25	; 0x22
		__ticks = 1;
    1b7c:	89 a3       	std	Y+33, r24	; 0x21
    1b7e:	3f c0       	rjmp	.+126    	; 0x1bfe <LCD_displayCharacter+0x1e2>
    1b80:	6b a1       	ldd	r22, Y+35	; 0x23
    1b82:	7c a1       	ldd	r23, Y+36	; 0x24
    1b84:	8d a1       	ldd	r24, Y+37	; 0x25
	else if (__tmp > 65535)
    1b86:	9e a1       	ldd	r25, Y+38	; 0x26
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	3f ef       	ldi	r19, 0xFF	; 255
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	57 e4       	ldi	r21, 0x47	; 71
    1b90:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	4c f5       	brge	.+82     	; 0x1bea <LCD_displayCharacter+0x1ce>
    1b98:	6f a1       	ldd	r22, Y+39	; 0x27
    1b9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9c:	89 a5       	ldd	r24, Y+41	; 0x29
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e2       	ldi	r20, 0x20	; 32
    1ba6:	51 e4       	ldi	r21, 0x41	; 65
    1ba8:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9a a3       	std	Y+34, r25	; 0x22
    1bbe:	89 a3       	std	Y+33, r24	; 0x21
    1bc0:	0f c0       	rjmp	.+30     	; 0x1be0 <LCD_displayCharacter+0x1c4>
    1bc2:	89 e1       	ldi	r24, 0x19	; 25
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	98 a3       	std	Y+32, r25	; 0x20
    1bc8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bcc:	98 a1       	ldd	r25, Y+32	; 0x20
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCD_displayCharacter+0x1b2>
    1bd2:	98 a3       	std	Y+32, r25	; 0x20
    1bd4:	8f 8f       	std	Y+31, r24	; 0x1f
    1bd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bda:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bdc:	9a a3       	std	Y+34, r25	; 0x22
    1bde:	89 a3       	std	Y+33, r24	; 0x21
    1be0:	89 a1       	ldd	r24, Y+33	; 0x21
    1be2:	9a a1       	ldd	r25, Y+34	; 0x22
    1be4:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be6:	69 f7       	brne	.-38     	; 0x1bc2 <LCD_displayCharacter+0x1a6>
    1be8:	14 c0       	rjmp	.+40     	; 0x1c12 <LCD_displayCharacter+0x1f6>
    1bea:	6b a1       	ldd	r22, Y+35	; 0x23
    1bec:	7c a1       	ldd	r23, Y+36	; 0x24
    1bee:	8d a1       	ldd	r24, Y+37	; 0x25
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf2:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9a a3       	std	Y+34, r25	; 0x22
    1bfc:	89 a3       	std	Y+33, r24	; 0x21
    1bfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1c00:	9a a1       	ldd	r25, Y+34	; 0x22
    1c02:	9e 8f       	std	Y+30, r25	; 0x1e
    1c04:	8d 8f       	std	Y+29, r24	; 0x1d
    1c06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <LCD_displayCharacter+0x1ee>
    1c0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c10:	8d 8f       	std	Y+29, r24	; 0x1d
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	69 ad       	ldd	r22, Y+57	; 0x39
    1c16:	b6 dc       	rcall	.-1684   	; 0x1584 <GPIO_writePort>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a0 e8       	ldi	r26, 0x80	; 128
    1c1e:	bf e3       	ldi	r27, 0x3F	; 63
    1c20:	89 8f       	std	Y+25, r24	; 0x19
    1c22:	9a 8f       	std	Y+26, r25	; 0x1a
    1c24:	ab 8f       	std	Y+27, r26	; 0x1b
    1c26:	bc 8f       	std	Y+28, r27	; 0x1c
    1c28:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a e7       	ldi	r20, 0x7A	; 122
    1c36:	53 e4       	ldi	r21, 0x43	; 67
    1c38:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8d 8b       	std	Y+21, r24	; 0x15
    1c42:	9e 8b       	std	Y+22, r25	; 0x16
    1c44:	af 8b       	std	Y+23, r26	; 0x17
    1c46:	b8 8f       	std	Y+24, r27	; 0x18
    1c48:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4e:	98 8d       	ldd	r25, Y+24	; 0x18
	if (__tmp < 1.0)
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <LCD_displayCharacter+0x24e>
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9c 8b       	std	Y+20, r25	; 0x14
    1c66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
    1c68:	3f c0       	rjmp	.+126    	; 0x1ce8 <LCD_displayCharacter+0x2cc>
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
	else if (__tmp > 65535)
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	3f ef       	ldi	r19, 0xFF	; 255
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	57 e4       	ldi	r21, 0x47	; 71
    1c7a:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	4c f5       	brge	.+82     	; 0x1cd4 <LCD_displayCharacter+0x2b8>
    1c82:	69 8d       	ldd	r22, Y+25	; 0x19
    1c84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c88:	9c 8d       	ldd	r25, Y+28	; 0x1c
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	51 e4       	ldi	r21, 0x41	; 65
    1c92:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
    1caa:	0f c0       	rjmp	.+30     	; 0x1cca <LCD_displayCharacter+0x2ae>
    1cac:	89 e1       	ldi	r24, 0x19	; 25
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9a 8b       	std	Y+18, r25	; 0x12
    1cb2:	89 8b       	std	Y+17, r24	; 0x11
    1cb4:	89 89       	ldd	r24, Y+17	; 0x11
    1cb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_displayCharacter+0x29c>
    1cbc:	9a 8b       	std	Y+18, r25	; 0x12
    1cbe:	89 8b       	std	Y+17, r24	; 0x11
    1cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9c 8b       	std	Y+20, r25	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc8:	8b 8b       	std	Y+19, r24	; 0x13
    1cca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	69 f7       	brne	.-38     	; 0x1cac <LCD_displayCharacter+0x290>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd2:	14 c0       	rjmp	.+40     	; 0x1cfc <LCD_displayCharacter+0x2e0>
    1cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cda:	98 8d       	ldd	r25, Y+24	; 0x18
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9c 8b       	std	Y+20, r25	; 0x14
    1ce6:	8b 8b       	std	Y+19, r24	; 0x13
    1ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cea:	9c 89       	ldd	r25, Y+20	; 0x14
    1cec:	98 8b       	std	Y+16, r25	; 0x10
    1cee:	8f 87       	std	Y+15, r24	; 0x0f
    1cf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf2:	98 89       	ldd	r25, Y+16	; 0x10
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <LCD_displayCharacter+0x2d8>
    1cf8:	98 8b       	std	Y+16, r25	; 0x10
    1cfa:	8f 87       	std	Y+15, r24	; 0x0f
    1cfc:	83 e0       	ldi	r24, 0x03	; 3
    1cfe:	66 e0       	ldi	r22, 0x06	; 6
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	11 db       	rcall	.-2526   	; 0x1326 <GPIO_writePin>
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e8       	ldi	r26, 0x80	; 128
    1d0a:	bf e3       	ldi	r27, 0x3F	; 63
    1d0c:	8b 87       	std	Y+11, r24	; 0x0b
    1d0e:	9c 87       	std	Y+12, r25	; 0x0c
    1d10:	ad 87       	std	Y+13, r26	; 0x0d
    1d12:	be 87       	std	Y+14, r27	; 0x0e
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4a e7       	ldi	r20, 0x7A	; 122
    1d22:	53 e4       	ldi	r21, 0x43	; 67
    1d24:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	8f 83       	std	Y+7, r24	; 0x07
    1d2e:	98 87       	std	Y+8, r25	; 0x08
    1d30:	a9 87       	std	Y+9, r26	; 0x09
    1d32:	ba 87       	std	Y+10, r27	; 0x0a
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <LCD_displayCharacter+0x33a>
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	3f c0       	rjmp	.+126    	; 0x1dd4 <LCD_displayCharacter+0x3b8>
		__ticks = 1;
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	4c f5       	brge	.+82     	; 0x1dc0 <LCD_displayCharacter+0x3a4>
    1d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d76:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	51 e4       	ldi	r21, 0x41	; 65
    1d7e:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <LCD_displayCharacter+0x39a>
    1d98:	89 e1       	ldi	r24, 0x19	; 25
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9c 83       	std	Y+4, r25	; 0x04
    1d9e:	8b 83       	std	Y+3, r24	; 0x03
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <LCD_displayCharacter+0x388>
    1da8:	9c 83       	std	Y+4, r25	; 0x04
    1daa:	8b 83       	std	Y+3, r24	; 0x03
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <LCD_displayCharacter+0x37c>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <LCD_displayCharacter+0x3cc>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_displayCharacter+0x3c4>
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	e9 96       	adiw	r28, 0x39	; 57
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <LCD_displayString+0x6>
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	9b 83       	std	Y+3, r25	; 0x03
    1e08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
    1e0c:	0d c0       	rjmp	.+26     	; 0x1e28 <LCD_displayString+0x2e>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	9b 81       	ldd	r25, Y+3	; 0x03
    1e18:	fc 01       	movw	r30, r24
    1e1a:	e2 0f       	add	r30, r18
    1e1c:	f3 1f       	adc	r31, r19
    1e1e:	80 81       	ld	r24, Z
    1e20:	fd dd       	rcall	.-1030   	; 0x1a1c <LCD_displayCharacter>
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
		i++;
    1e24:	8f 5f       	subi	r24, 0xFF	; 255
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	fc 01       	movw	r30, r24
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 23       	and	r24, r24
    1e3c:	41 f7       	brne	.-48     	; 0x1e0e <LCD_displayString+0x14>
    1e3e:	0f 90       	pop	r0
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	62 97       	sbiw	r28, 0x12	; 18
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	9a 8b       	std	Y+18, r25	; 0x12
    1e60:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1e62:	89 89       	ldd	r24, Y+17	; 0x11
    1e64:	9a 89       	ldd	r25, Y+18	; 0x12
    1e66:	9e 01       	movw	r18, r28
    1e68:	2f 5f       	subi	r18, 0xFF	; 255
    1e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6c:	b9 01       	movw	r22, r18
    1e6e:	4a e0       	ldi	r20, 0x0A	; 10
    1e70:	50 e0       	ldi	r21, 0x00	; 0
    1e72:	62 d4       	rcall	.+2244   	; 0x2738 <itoa>
    1e74:	ce 01       	movw	r24, r28
   LCD_displayString(buff); /* Display the string */
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	c0 df       	rcall	.-128    	; 0x1dfa <LCD_displayString>
    1e7a:	62 96       	adiw	r28, 0x12	; 18
    1e7c:	0f b6       	in	r0, 0x3f	; 63
}
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	d6 db       	rcall	.-2132   	; 0x1644 <LCD_sendCommand>
    1e98:	cf 91       	pop	r28
}
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <main>:
#include "pwm.h"
#include "TC72_Tempr.h"
#include "SPI_2.h"

typedef unsigned char uint8_t;	
int main(void) {
    1e9e:	cf 92       	push	r12
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	c0 55       	subi	r28, 0x50	; 80
    1eb4:	d0 40       	sbci	r29, 0x00	; 0
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
	StartTimer();
    1ec0:	0e 94 4d 07 	call	0xe9a	; 0xe9a <StartTimer>
    SetPollingTime(500);
    1ec4:	84 ef       	ldi	r24, 0xF4	; 244
    1ec6:	91 e0       	ldi	r25, 0x01	; 1
    1ec8:	0e 94 35 07 	call	0xe6a	; 0xe6a <SetPollingTime>
    StartPolling();
    1ecc:	0e 94 28 07 	call	0xe50	; 0xe50 <StartPolling>
    initPWM();
    1ed0:	54 d3       	rcall	.+1704   	; 0x257a <initPWM>
    1ed2:	9c db       	rcall	.-2248   	; 0x160c <LCD_init>
	LCD_init();
    1ed4:	97 d3       	rcall	.+1838   	; 0x2604 <SPI_initMaster>
    1ed6:	88 e6       	ldi	r24, 0x68	; 104

	/* Initialize the SPI driver as Slave */
	SPI_initMaster();
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	8f df       	rcall	.-226    	; 0x1dfa <LCD_displayString>
	
	/* Display the received string on the LCD display */
	LCD_displayString("temp is:");
    1edc:	a8 e3       	ldi	r26, 0x38	; 56
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e8 e3       	ldi	r30, 0x38	; 56
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
	
	//make ss =0 no select slave
	PORTB = PORTB & (~(1<<4));
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8f 7e       	andi	r24, 0xEF	; 239
    1ee8:	8c 93       	st	X, r24
    1eea:	fe 01       	movw	r30, r28
    1eec:	e9 5b       	subi	r30, 0xB9	; 185
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	11 82       	std	Z+1, r1	; 0x01
	
	
	int temprMSB,temprLSB;
	float signal;
	int accTemp=0;
    1ef2:	10 82       	st	Z, r1
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ed 5b       	subi	r30, 0xBD	; 189
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a6 e9       	ldi	r26, 0x96	; 150
    1f00:	b3 e4       	ldi	r27, 0x43	; 67
    1f02:	80 83       	st	Z, r24
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	a2 83       	std	Z+2, r26	; 0x02
    1f08:	b3 83       	std	Z+3, r27	; 0x03
    1f0a:	8e 01       	movw	r16, r28
    1f0c:	01 5c       	subi	r16, 0xC1	; 193
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	ed 5b       	subi	r30, 0xBD	; 189
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a e7       	ldi	r20, 0x7A	; 122
    1f24:	53 e4       	ldi	r21, 0x43	; 67
    1f26:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	f8 01       	movw	r30, r16
    1f30:	80 83       	st	Z, r24
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	a2 83       	std	Z+2, r26	; 0x02
    1f36:	b3 83       	std	Z+3, r27	; 0x03
    1f38:	fe 01       	movw	r30, r28
    1f3a:	ff 96       	adiw	r30, 0x3f	; 63
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
	if (__tmp < 1.0)
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e8       	ldi	r20, 0x80	; 128
    1f4a:	5f e3       	ldi	r21, 0x3F	; 63
    1f4c:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    1f50:	88 23       	and	r24, r24
    1f52:	2c f4       	brge	.+10     	; 0x1f5e <main+0xc0>
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9e af       	std	Y+62, r25	; 0x3e
    1f5a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
    1f5c:	46 c0       	rjmp	.+140    	; 0x1fea <main+0x14c>
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ff 96       	adiw	r30, 0x3f	; 63
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
	else if (__tmp > 65535)
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	64 f5       	brge	.+88     	; 0x1fd2 <main+0x134>
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	ed 5b       	subi	r30, 0xBD	; 189
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9e af       	std	Y+62, r25	; 0x3e
    1fa6:	8d af       	std	Y+61, r24	; 0x3d
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <main+0x12a>
    1faa:	89 e1       	ldi	r24, 0x19	; 25
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9c af       	std	Y+60, r25	; 0x3c
    1fb0:	8b af       	std	Y+59, r24	; 0x3b
    1fb2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fb4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <main+0x118>
    1fba:	9c af       	std	Y+60, r25	; 0x3c
    1fbc:	8b af       	std	Y+59, r24	; 0x3b
    1fbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	9e af       	std	Y+62, r25	; 0x3e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	8d af       	std	Y+61, r24	; 0x3d
    1fc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fca:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	69 f7       	brne	.-38     	; 0x1faa <main+0x10c>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd0:	16 c0       	rjmp	.+44     	; 0x1ffe <main+0x160>
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ff 96       	adiw	r30, 0x3f	; 63
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e af       	std	Y+62, r25	; 0x3e
    1fe8:	8d af       	std	Y+61, r24	; 0x3d
    1fea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fee:	9a af       	std	Y+58, r25	; 0x3a
    1ff0:	89 af       	std	Y+57, r24	; 0x39
    1ff2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ff4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <main+0x158>
    1ffa:	9a af       	std	Y+58, r25	; 0x3a
    1ffc:	89 af       	std	Y+57, r24	; 0x39
    1ffe:	46 df       	rcall	.-372    	; 0x1e8c <LCD_clearScreen>
    2000:	0e 94 dd 06 	call	0xdba	; 0xdba <Poll>
    2004:	80 e0       	ldi	r24, 0x00	; 0
	while(1){
		
		_delay_ms(300);
		LCD_clearScreen();
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a6 e9       	ldi	r26, 0x96	; 150
		Poll();
    200a:	b3 e4       	ldi	r27, 0x43	; 67
    200c:	8d ab       	std	Y+53, r24	; 0x35
    200e:	9e ab       	std	Y+54, r25	; 0x36
    2010:	af ab       	std	Y+55, r26	; 0x37
    2012:	b8 af       	std	Y+56, r27	; 0x38
    2014:	6d a9       	ldd	r22, Y+53	; 0x35
    2016:	7e a9       	ldd	r23, Y+54	; 0x36
    2018:	8f a9       	ldd	r24, Y+55	; 0x37
    201a:	98 ad       	ldd	r25, Y+56	; 0x38
    201c:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a e7       	ldi	r20, 0x7A	; 122
    2022:	53 e4       	ldi	r21, 0x43	; 67
    2024:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	89 ab       	std	Y+49, r24	; 0x31
    202e:	9a ab       	std	Y+50, r25	; 0x32
    2030:	ab ab       	std	Y+51, r26	; 0x33
    2032:	bc ab       	std	Y+52, r27	; 0x34
    2034:	69 a9       	ldd	r22, Y+49	; 0x31
    2036:	7a a9       	ldd	r23, Y+50	; 0x32
    2038:	8b a9       	ldd	r24, Y+51	; 0x33
    203a:	9c a9       	ldd	r25, Y+52	; 0x34
    203c:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	2c f4       	brge	.+10     	; 0x2056 <main+0x1b8>
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	98 ab       	std	Y+48, r25	; 0x30
    2052:	8f a7       	std	Y+47, r24	; 0x2f
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <main+0x236>
		__ticks = 1;
    2056:	69 a9       	ldd	r22, Y+49	; 0x31
    2058:	7a a9       	ldd	r23, Y+50	; 0x32
    205a:	8b a9       	ldd	r24, Y+51	; 0x33
    205c:	9c a9       	ldd	r25, Y+52	; 0x34
    205e:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	57 e4       	ldi	r21, 0x47	; 71
    2066:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    206a:	18 16       	cp	r1, r24
    206c:	4c f5       	brge	.+82     	; 0x20c0 <main+0x222>
    206e:	6d a9       	ldd	r22, Y+53	; 0x35
    2070:	7e a9       	ldd	r23, Y+54	; 0x36
    2072:	8f a9       	ldd	r24, Y+55	; 0x37
    2074:	98 ad       	ldd	r25, Y+56	; 0x38
    2076:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	98 ab       	std	Y+48, r25	; 0x30
    2094:	8f a7       	std	Y+47, r24	; 0x2f
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <main+0x218>
    2098:	89 e1       	ldi	r24, 0x19	; 25
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9e a7       	std	Y+46, r25	; 0x2e
    209e:	8d a7       	std	Y+45, r24	; 0x2d
    20a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    20a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <main+0x206>
    20a8:	9e a7       	std	Y+46, r25	; 0x2e
    20aa:	8d a7       	std	Y+45, r24	; 0x2d
    20ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ae:	98 a9       	ldd	r25, Y+48	; 0x30
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	98 ab       	std	Y+48, r25	; 0x30
    20b4:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b8:	98 a9       	ldd	r25, Y+48	; 0x30
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	69 f7       	brne	.-38     	; 0x2098 <main+0x1fa>
    20be:	14 c0       	rjmp	.+40     	; 0x20e8 <main+0x24a>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c0:	69 a9       	ldd	r22, Y+49	; 0x31
    20c2:	7a a9       	ldd	r23, Y+50	; 0x32
    20c4:	8b a9       	ldd	r24, Y+51	; 0x33
    20c6:	9c a9       	ldd	r25, Y+52	; 0x34
    20c8:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	98 ab       	std	Y+48, r25	; 0x30
    20d2:	8f a7       	std	Y+47, r24	; 0x2f
    20d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d6:	98 a9       	ldd	r25, Y+48	; 0x30
    20d8:	9c a7       	std	Y+44, r25	; 0x2c
    20da:	8b a7       	std	Y+43, r24	; 0x2b
    20dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20de:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <main+0x242>
    20e4:	9c a7       	std	Y+44, r25	; 0x2c
    20e6:	8b a7       	std	Y+43, r24	; 0x2b
    20e8:	a8 e3       	ldi	r26, 0x38	; 56
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e8 e3       	ldi	r30, 0x38	; 56
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
	
		_delay_ms(300);
		//make ss =1 select slave
		PORTB = PORTB | (1<<4);
    20f2:	80 61       	ori	r24, 0x10	; 16
    20f4:	8c 93       	st	X, r24
    20f6:	80 e8       	ldi	r24, 0x80	; 128
    20f8:	ab d2       	rcall	.+1366   	; 0x2650 <SPI_sendReceiveByte>
    20fa:	80 e1       	ldi	r24, 0x10	; 16
    20fc:	a9 d2       	rcall	.+1362   	; 0x2650 <SPI_sendReceiveByte>
    20fe:	a8 e3       	ldi	r26, 0x38	; 56
		SPI_sendReceiveByte(CONTROL_REG);
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e8 e3       	ldi	r30, 0x38	; 56
    2104:	f0 e0       	ldi	r31, 0x00	; 0
		SPI_sendReceiveByte(START_CONV);      //Continous conversion
    2106:	80 81       	ld	r24, Z
    2108:	8f 7e       	andi	r24, 0xEF	; 239
    210a:	8c 93       	st	X, r24
		//make ss =0 no select slave
		PORTB = PORTB & (~(1<<4));
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	a6 e9       	ldi	r26, 0x96	; 150
    2112:	b3 e4       	ldi	r27, 0x43	; 67
    2114:	8f a3       	std	Y+39, r24	; 0x27
    2116:	98 a7       	std	Y+40, r25	; 0x28
    2118:	a9 a7       	std	Y+41, r26	; 0x29
    211a:	ba a7       	std	Y+42, r27	; 0x2a
    211c:	6f a1       	ldd	r22, Y+39	; 0x27
    211e:	78 a5       	ldd	r23, Y+40	; 0x28
    2120:	89 a5       	ldd	r24, Y+41	; 0x29
    2122:	9a a5       	ldd	r25, Y+42	; 0x2a
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	4a e7       	ldi	r20, 0x7A	; 122
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212a:	53 e4       	ldi	r21, 0x43	; 67
    212c:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	8b a3       	std	Y+35, r24	; 0x23
    2136:	9c a3       	std	Y+36, r25	; 0x24
    2138:	ad a3       	std	Y+37, r26	; 0x25
    213a:	be a3       	std	Y+38, r27	; 0x26
    213c:	6b a1       	ldd	r22, Y+35	; 0x23
    213e:	7c a1       	ldd	r23, Y+36	; 0x24
    2140:	8d a1       	ldd	r24, Y+37	; 0x25
    2142:	9e a1       	ldd	r25, Y+38	; 0x26
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
    214a:	5f e3       	ldi	r21, 0x3F	; 63
    214c:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    2150:	88 23       	and	r24, r24
    2152:	2c f4       	brge	.+10     	; 0x215e <main+0x2c0>
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9a a3       	std	Y+34, r25	; 0x22
    215a:	89 a3       	std	Y+33, r24	; 0x21
    215c:	3f c0       	rjmp	.+126    	; 0x21dc <main+0x33e>
    215e:	6b a1       	ldd	r22, Y+35	; 0x23
    2160:	7c a1       	ldd	r23, Y+36	; 0x24
		__ticks = 1;
    2162:	8d a1       	ldd	r24, Y+37	; 0x25
    2164:	9e a1       	ldd	r25, Y+38	; 0x26
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	3f ef       	ldi	r19, 0xFF	; 255
    216a:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
    216c:	57 e4       	ldi	r21, 0x47	; 71
    216e:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    2172:	18 16       	cp	r1, r24
    2174:	4c f5       	brge	.+82     	; 0x21c8 <main+0x32a>
    2176:	6f a1       	ldd	r22, Y+39	; 0x27
    2178:	78 a5       	ldd	r23, Y+40	; 0x28
    217a:	89 a5       	ldd	r24, Y+41	; 0x29
    217c:	9a a5       	ldd	r25, Y+42	; 0x2a
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2184:	51 e4       	ldi	r21, 0x41	; 65
    2186:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	9a a3       	std	Y+34, r25	; 0x22
    219c:	89 a3       	std	Y+33, r24	; 0x21
    219e:	0f c0       	rjmp	.+30     	; 0x21be <main+0x320>
    21a0:	89 e1       	ldi	r24, 0x19	; 25
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	98 a3       	std	Y+32, r25	; 0x20
    21a6:	8f 8f       	std	Y+31, r24	; 0x1f
    21a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21aa:	98 a1       	ldd	r25, Y+32	; 0x20
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <main+0x30e>
    21b0:	98 a3       	std	Y+32, r25	; 0x20
    21b2:	8f 8f       	std	Y+31, r24	; 0x1f
    21b4:	89 a1       	ldd	r24, Y+33	; 0x21
    21b6:	9a a1       	ldd	r25, Y+34	; 0x22
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	9a a3       	std	Y+34, r25	; 0x22
    21bc:	89 a3       	std	Y+33, r24	; 0x21
    21be:	89 a1       	ldd	r24, Y+33	; 0x21
    21c0:	9a a1       	ldd	r25, Y+34	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	69 f7       	brne	.-38     	; 0x21a0 <main+0x302>
    21c6:	14 c0       	rjmp	.+40     	; 0x21f0 <main+0x352>
    21c8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ca:	7c a1       	ldd	r23, Y+36	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21cc:	8d a1       	ldd	r24, Y+37	; 0x25
    21ce:	9e a1       	ldd	r25, Y+38	; 0x26
    21d0:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d6:	cb 01       	movw	r24, r22
    21d8:	9a a3       	std	Y+34, r25	; 0x22
    21da:	89 a3       	std	Y+33, r24	; 0x21
    21dc:	89 a1       	ldd	r24, Y+33	; 0x21
    21de:	9a a1       	ldd	r25, Y+34	; 0x22
    21e0:	9e 8f       	std	Y+30, r25	; 0x1e
    21e2:	8d 8f       	std	Y+29, r24	; 0x1d
    21e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <main+0x34a>
    21ec:	9e 8f       	std	Y+30, r25	; 0x1e
    21ee:	8d 8f       	std	Y+29, r24	; 0x1d
    21f0:	a8 e3       	ldi	r26, 0x38	; 56
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e8 e3       	ldi	r30, 0x38	; 56
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	80 61       	ori	r24, 0x10	; 16
    21fc:	8c 93       	st	X, r24
		_delay_ms(300);
		
		
		//make ss =1 select slave
		PORTB = PORTB | (1<<4);
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	27 d2       	rcall	.+1102   	; 0x2650 <SPI_sendReceiveByte>
    2202:	8f ef       	ldi	r24, 0xFF	; 255
    2204:	25 d2       	rcall	.+1098   	; 0x2650 <SPI_sendReceiveByte>
    2206:	fe 01       	movw	r30, r28
    2208:	e1 5b       	subi	r30, 0xB1	; 177
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
		SPI_sendReceiveByte(TEMPR_REG);                  //Access Tempr register for reading
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	91 83       	std	Z+1, r25	; 0x01
		temprMSB = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2212:	80 83       	st	Z, r24
    2214:	8f ef       	ldi	r24, 0xFF	; 255
    2216:	1c d2       	rcall	.+1080   	; 0x2650 <SPI_sendReceiveByte>
    2218:	fe 01       	movw	r30, r28
    221a:	e3 5b       	subi	r30, 0xB3	; 179
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
		temprLSB = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2226:	a8 e3       	ldi	r26, 0x38	; 56
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e8 e3       	ldi	r30, 0x38	; 56
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8f 7e       	andi	r24, 0xEF	; 239
    2232:	8c 93       	st	X, r24
    2234:	fe 01       	movw	r30, r28
    2236:	e1 5b       	subi	r30, 0xB1	; 177
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
		//make ss =0 no select slave
		PORTB = PORTB & (~(1<<4));
    223a:	2f e0       	ldi	r18, 0x0F	; 15
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	a9 01       	movw	r20, r18
    2244:	48 1b       	sub	r20, r24
    2246:	59 0b       	sbc	r21, r25
		
		
		 accTemp=accTemp+(30-(temprMSB*2));
    2248:	ca 01       	movw	r24, r20
    224a:	9c 01       	movw	r18, r24
    224c:	22 0f       	add	r18, r18
    224e:	33 1f       	adc	r19, r19
    2250:	de 01       	movw	r26, r28
    2252:	a9 5b       	subi	r26, 0xB9	; 185
    2254:	bf 4f       	sbci	r27, 0xFF	; 255
    2256:	fe 01       	movw	r30, r28
    2258:	e9 5b       	subi	r30, 0xB9	; 185
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
    2260:	82 0f       	add	r24, r18
    2262:	93 1f       	adc	r25, r19
    2264:	8d 93       	st	X+, r24
    2266:	9c 93       	st	X, r25
    2268:	fe 01       	movw	r30, r28
    226a:	e1 5b       	subi	r30, 0xB1	; 177
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	2f e0       	ldi	r18, 0x0F	; 15
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	f9 01       	movw	r30, r18
    2278:	e8 1b       	sub	r30, r24
    227a:	f9 0b       	sbc	r31, r25
         signal=((0.1*(30-(temprMSB*2)))+(0.01*(accTemp)));
    227c:	cf 01       	movw	r24, r30
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	aa 27       	eor	r26, r26
    2284:	97 fd       	sbrc	r25, 7
    2286:	a0 95       	com	r26
    2288:	ba 2f       	mov	r27, r26
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 39 04 	call	0x872	; 0x872 <__floatsisf>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	2d ec       	ldi	r18, 0xCD	; 205
    229c:	3c ec       	ldi	r19, 0xCC	; 204
    229e:	4c ec       	ldi	r20, 0xCC	; 204
    22a0:	5d e3       	ldi	r21, 0x3D	; 61
    22a2:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	6c 01       	movw	r12, r24
    22ac:	7d 01       	movw	r14, r26
    22ae:	fe 01       	movw	r30, r28
    22b0:	e9 5b       	subi	r30, 0xB9	; 185
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	aa 27       	eor	r26, r26
    22ba:	97 fd       	sbrc	r25, 7
    22bc:	a0 95       	com	r26
    22be:	ba 2f       	mov	r27, r26
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 39 04 	call	0x872	; 0x872 <__floatsisf>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	2a e0       	ldi	r18, 0x0A	; 10
    22d2:	37 ed       	ldi	r19, 0xD7	; 215
    22d4:	43 e2       	ldi	r20, 0x23	; 35
    22d6:	5c e3       	ldi	r21, 0x3C	; 60
    22d8:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9c 01       	movw	r18, r24
    22e2:	ad 01       	movw	r20, r26
    22e4:	8e 01       	movw	r16, r28
    22e6:	07 5b       	subi	r16, 0xB7	; 183
    22e8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ea:	c7 01       	movw	r24, r14
    22ec:	b6 01       	movw	r22, r12
    22ee:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__addsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	f8 01       	movw	r30, r16
    22f8:	80 83       	st	Z, r24
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	a2 83       	std	Z+2, r26	; 0x02
    22fe:	b3 83       	std	Z+3, r27	; 0x03
    2300:	fe 01       	movw	r30, r28
    2302:	e7 5b       	subi	r30, 0xB7	; 183
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e5       	ldi	r20, 0x50	; 80
		  
		 Timer0_PWM_Init((signal/13)*186);
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 09 03 	call	0x612	; 0x612 <__divsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a e3       	ldi	r20, 0x3A	; 58
    2328:	53 e4       	ldi	r21, 0x43	; 67
    232a:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	41 d1       	rcall	.+642    	; 0x25ba <Timer0_PWM_Init>
    2338:	81 e7       	ldi	r24, 0x71	; 113
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	5e dd       	rcall	.-1348   	; 0x1dfa <LCD_displayString>
    233e:	fe 01       	movw	r30, r28
    2340:	e1 5b       	subi	r30, 0xB1	; 177
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	2f e0       	ldi	r18, 0x0F	; 15
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	a9 01       	movw	r20, r18

		//LCD_displayString("temp is :");
		//LCD_intgerToString(temprMSB);

        LCD_displayString("diff is :");
    234e:	48 1b       	sub	r20, r24
    2350:	59 0b       	sbc	r21, r25
    2352:	ca 01       	movw	r24, r20
    2354:	88 0f       	add	r24, r24
		//LCD_intgerToString((temprMSB<<8) + temprLSB);
		LCD_intgerToString(30-(temprMSB*2));
    2356:	99 1f       	adc	r25, r25
    2358:	78 dd       	rcall	.-1296   	; 0x1e4a <LCD_intgerToString>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e8       	ldi	r25, 0x80	; 128
    235e:	ab e3       	ldi	r26, 0x3B	; 59
    2360:	b5 e4       	ldi	r27, 0x45	; 69
    2362:	89 8f       	std	Y+25, r24	; 0x19
    2364:	9a 8f       	std	Y+26, r25	; 0x1a
    2366:	ab 8f       	std	Y+27, r26	; 0x1b
    2368:	bc 8f       	std	Y+28, r27	; 0x1c
    236a:	69 8d       	ldd	r22, Y+25	; 0x19
    236c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4a e7       	ldi	r20, 0x7A	; 122
    2378:	53 e4       	ldi	r21, 0x43	; 67
    237a:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	8d 8b       	std	Y+21, r24	; 0x15
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2384:	9e 8b       	std	Y+22, r25	; 0x16
    2386:	af 8b       	std	Y+23, r26	; 0x17
    2388:	b8 8f       	std	Y+24, r27	; 0x18
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    239e:	88 23       	and	r24, r24
    23a0:	2c f4       	brge	.+10     	; 0x23ac <main+0x50e>
    23a2:	81 e0       	ldi	r24, 0x01	; 1
	if (__tmp < 1.0)
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	3f c0       	rjmp	.+126    	; 0x242a <main+0x58c>
    23ac:	6d 89       	ldd	r22, Y+21	; 0x15
    23ae:	7e 89       	ldd	r23, Y+22	; 0x16
    23b0:	8f 89       	ldd	r24, Y+23	; 0x17
    23b2:	98 8d       	ldd	r25, Y+24	; 0x18
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
		__ticks = 1;
    23bc:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	4c f5       	brge	.+82     	; 0x2416 <main+0x578>
    23c4:	69 8d       	ldd	r22, Y+25	; 0x19
	else if (__tmp > 65535)
    23c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9c 8b       	std	Y+20, r25	; 0x14
    23ea:	8b 8b       	std	Y+19, r24	; 0x13
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <main+0x56e>
    23ee:	89 e1       	ldi	r24, 0x19	; 25
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9a 8b       	std	Y+18, r25	; 0x12
    23f4:	89 8b       	std	Y+17, r24	; 0x11
    23f6:	89 89       	ldd	r24, Y+17	; 0x11
    23f8:	9a 89       	ldd	r25, Y+18	; 0x12
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <main+0x55c>
    23fe:	9a 8b       	std	Y+18, r25	; 0x12
    2400:	89 8b       	std	Y+17, r24	; 0x11
    2402:	8b 89       	ldd	r24, Y+19	; 0x13
    2404:	9c 89       	ldd	r25, Y+20	; 0x14
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <main+0x550>
    2414:	14 c0       	rjmp	.+40     	; 0x243e <main+0x5a0>
    2416:	6d 89       	ldd	r22, Y+21	; 0x15
    2418:	7e 89       	ldd	r23, Y+22	; 0x16
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2426:	9c 8b       	std	Y+20, r25	; 0x14
    2428:	8b 8b       	std	Y+19, r24	; 0x13
    242a:	8b 89       	ldd	r24, Y+19	; 0x13
    242c:	9c 89       	ldd	r25, Y+20	; 0x14
    242e:	98 8b       	std	Y+16, r25	; 0x10
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2430:	8f 87       	std	Y+15, r24	; 0x0f
    2432:	8f 85       	ldd	r24, Y+15	; 0x0f
    2434:	98 89       	ldd	r25, Y+16	; 0x10
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <main+0x598>
    243a:	98 8b       	std	Y+16, r25	; 0x10
    243c:	8f 87       	std	Y+15, r24	; 0x0f
    243e:	26 dd       	rcall	.-1460   	; 0x1e8c <LCD_clearScreen>
    2440:	8b e7       	ldi	r24, 0x7B	; 123
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	da dc       	rcall	.-1612   	; 0x1dfa <LCD_displayString>
    2446:	fe 01       	movw	r30, r28
    2448:	e7 5b       	subi	r30, 0xB7	; 183
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	60 81       	ld	r22, Z
    244e:	71 81       	ldd	r23, Z+1	; 0x01
    2450:	82 81       	ldd	r24, Z+2	; 0x02
    2452:	93 81       	ldd	r25, Z+3	; 0x03
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(3000);
		LCD_clearScreen();
    2458:	40 e2       	ldi	r20, 0x20	; 32
    245a:	51 e4       	ldi	r21, 0x41	; 65
        LCD_displayString("error is :");
    245c:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22

		LCD_intgerToString(signal*10);
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 95 04 	call	0x92a	; 0x92a <__fixsfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	ec dc       	rcall	.-1576   	; 0x1e4a <LCD_intgerToString>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e8       	ldi	r25, 0x80	; 128
    2476:	ab e3       	ldi	r26, 0x3B	; 59
    2478:	b5 e4       	ldi	r27, 0x45	; 69
    247a:	8b 87       	std	Y+11, r24	; 0x0b
    247c:	9c 87       	std	Y+12, r25	; 0x0c
    247e:	ad 87       	std	Y+13, r26	; 0x0d
    2480:	be 87       	std	Y+14, r27	; 0x0e
    2482:	6b 85       	ldd	r22, Y+11	; 0x0b
    2484:	7c 85       	ldd	r23, Y+12	; 0x0c
    2486:	8d 85       	ldd	r24, Y+13	; 0x0d
    2488:	9e 85       	ldd	r25, Y+14	; 0x0e
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	4a e7       	ldi	r20, 0x7A	; 122
    2490:	53 e4       	ldi	r21, 0x43	; 67
    2492:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	8f 83       	std	Y+7, r24	; 0x07
    249c:	98 87       	std	Y+8, r25	; 0x08
    249e:	a9 87       	std	Y+9, r26	; 0x09
    24a0:	ba 87       	std	Y+10, r27	; 0x0a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a2:	6f 81       	ldd	r22, Y+7	; 0x07
    24a4:	78 85       	ldd	r23, Y+8	; 0x08
    24a6:	89 85       	ldd	r24, Y+9	; 0x09
    24a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e8       	ldi	r20, 0x80	; 128
    24b0:	5f e3       	ldi	r21, 0x3F	; 63
    24b2:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    24b6:	88 23       	and	r24, r24
    24b8:	2c f4       	brge	.+10     	; 0x24c4 <main+0x626>
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
	if (__tmp < 1.0)
    24c2:	3f c0       	rjmp	.+126    	; 0x2542 <main+0x6a4>
    24c4:	6f 81       	ldd	r22, Y+7	; 0x07
    24c6:	78 85       	ldd	r23, Y+8	; 0x08
    24c8:	89 85       	ldd	r24, Y+9	; 0x09
    24ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	3f ef       	ldi	r19, 0xFF	; 255
    24d0:	4f e7       	ldi	r20, 0x7F	; 127
    24d2:	57 e4       	ldi	r21, 0x47	; 71
    24d4:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    24d8:	18 16       	cp	r1, r24
		__ticks = 1;
    24da:	4c f5       	brge	.+82     	; 0x252e <main+0x690>
    24dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24de:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e2:	9e 85       	ldd	r25, Y+14	; 0x0e
	else if (__tmp > 65535)
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e2       	ldi	r20, 0x20	; 32
    24ea:	51 e4       	ldi	r21, 0x41	; 65
    24ec:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	bc 01       	movw	r22, r24
    24f6:	cd 01       	movw	r24, r26
    24f8:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
    2504:	0f c0       	rjmp	.+30     	; 0x2524 <main+0x686>
    2506:	89 e1       	ldi	r24, 0x19	; 25
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9c 83       	std	Y+4, r25	; 0x04
    250c:	8b 83       	std	Y+3, r24	; 0x03
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <main+0x674>
    2516:	9c 83       	std	Y+4, r25	; 0x04
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	9e 81       	ldd	r25, Y+6	; 0x06
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	69 f7       	brne	.-38     	; 0x2506 <main+0x668>
    252c:	14 c0       	rjmp	.+40     	; 0x2556 <main+0x6b8>
    252e:	6f 81       	ldd	r22, Y+7	; 0x07
    2530:	78 85       	ldd	r23, Y+8	; 0x08
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	9a 83       	std	Y+2, r25	; 0x02
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	9a 81       	ldd	r25, Y+2	; 0x02
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <main+0x6b0>
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	c0 5b       	subi	r28, 0xB0	; 176
    255c:	df 4f       	sbci	r29, 0xFF	; 255
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	1f 91       	pop	r17
    256e:	0f 91       	pop	r16
    2570:	ff 90       	pop	r15
    2572:	ef 90       	pop	r14
    2574:	df 90       	pop	r13

		_delay_ms(3000);

	return 0;
    2576:	cf 90       	pop	r12
    2578:	08 95       	ret

0000257a <initPWM>:
#include "pwm.h"
#include "avr/io.h"


void initPWM(void)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
	
	DDRD|=(uint8_t)(((uint8_t)1)<<DDD4);
    2582:	a1 e3       	ldi	r26, 0x31	; 49
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e1 e3       	ldi	r30, 0x31	; 49
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	80 61       	ori	r24, 0x10	; 16
    258e:	8c 93       	st	X, r24
	DDRD&=(uint8_t)~(uint8_t)(((uint8_t)1)<<DDD0);
    2590:	a1 e3       	ldi	r26, 0x31	; 49
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e1 e3       	ldi	r30, 0x31	; 49
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	8e 7f       	andi	r24, 0xFE	; 254
    259c:	8c 93       	st	X, r24
	TCCR1B|=(uint8_t)((((uint8_t)1)<<WGM12)|((uint8_t)1<<CS10)); /*CS10 n=1 no prescaler fast pwm*/
    259e:	ae e4       	ldi	r26, 0x4E	; 78
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	ee e4       	ldi	r30, 0x4E	; 78
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	89 60       	ori	r24, 0x09	; 9
    25aa:	8c 93       	st	X, r24
	OCR1B=(uint8_t)0;
    25ac:	e8 e4       	ldi	r30, 0x48	; 72
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	11 82       	std	Z+1, r1	; 0x01
    25b2:	10 82       	st	Z, r1
	return;

}
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <Timer0_PWM_Init>:
void Timer0_PWM_Init(float set_duty_cycle)
{
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <Timer0_PWM_Init+0xa>
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <Timer0_PWM_Init+0xc>
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	69 83       	std	Y+1, r22	; 0x01
    25cc:	7a 83       	std	Y+2, r23	; 0x02
    25ce:	8b 83       	std	Y+3, r24	; 0x03
    25d0:	9c 83       	std	Y+4, r25	; 0x04
    TCNT0 = 0; // Set Timer Initial Value to 0
    25d2:	e2 e5       	ldi	r30, 0x52	; 82
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	10 82       	st	Z, r1


    OCR1B  = set_duty_cycle;
    25d8:	08 e4       	ldi	r16, 0x48	; 72
    25da:	10 e0       	ldi	r17, 0x00	; 0
    25dc:	69 81       	ldd	r22, Y+1	; 0x01
    25de:	7a 81       	ldd	r23, Y+2	; 0x02
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	f8 01       	movw	r30, r16
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	80 83       	st	Z, r24

}
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	08 95       	ret

00002604 <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	64 e0       	ldi	r22, 0x04	; 4
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	65 e0       	ldi	r22, 0x05	; 5
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	66 e0       	ldi	r22, 0x06	; 6
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	67 e0       	ldi	r22, 0x07	; 7
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 0 Sample Data with the raising edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR);
    2634:	ed e2       	ldi	r30, 0x2D	; 45
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 e5       	ldi	r24, 0x50	; 80
    263a:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    263c:	ae e2       	ldi	r26, 0x2E	; 46
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	ee e2       	ldi	r30, 0x2E	; 46
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	8e 7f       	andi	r24, 0xFE	; 254
    2648:	8c 93       	st	X, r24
}
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	0f 92       	push	r0
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    265c:	ef e2       	ldi	r30, 0x2F	; 47
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    2664:	ee e2       	ldi	r30, 0x2E	; 46
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	88 23       	and	r24, r24
    266c:	dc f7       	brge	.-10     	; 0x2664 <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    266e:	ef e2       	ldi	r30, 0x2F	; 47
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
}
    2674:	0f 90       	pop	r0
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <__divmodhi4>:
    267c:	97 fb       	bst	r25, 7
    267e:	09 2e       	mov	r0, r25
    2680:	07 26       	eor	r0, r23
    2682:	0a d0       	rcall	.+20     	; 0x2698 <__divmodhi4_neg1>
    2684:	77 fd       	sbrc	r23, 7
    2686:	04 d0       	rcall	.+8      	; 0x2690 <__divmodhi4_neg2>
    2688:	0c d0       	rcall	.+24     	; 0x26a2 <__udivmodhi4>
    268a:	06 d0       	rcall	.+12     	; 0x2698 <__divmodhi4_neg1>
    268c:	00 20       	and	r0, r0
    268e:	1a f4       	brpl	.+6      	; 0x2696 <__divmodhi4_exit>

00002690 <__divmodhi4_neg2>:
    2690:	70 95       	com	r23
    2692:	61 95       	neg	r22
    2694:	7f 4f       	sbci	r23, 0xFF	; 255

00002696 <__divmodhi4_exit>:
    2696:	08 95       	ret

00002698 <__divmodhi4_neg1>:
    2698:	f6 f7       	brtc	.-4      	; 0x2696 <__divmodhi4_exit>
    269a:	90 95       	com	r25
    269c:	81 95       	neg	r24
    269e:	9f 4f       	sbci	r25, 0xFF	; 255
    26a0:	08 95       	ret

000026a2 <__udivmodhi4>:
    26a2:	aa 1b       	sub	r26, r26
    26a4:	bb 1b       	sub	r27, r27
    26a6:	51 e1       	ldi	r21, 0x11	; 17
    26a8:	07 c0       	rjmp	.+14     	; 0x26b8 <__udivmodhi4_ep>

000026aa <__udivmodhi4_loop>:
    26aa:	aa 1f       	adc	r26, r26
    26ac:	bb 1f       	adc	r27, r27
    26ae:	a6 17       	cp	r26, r22
    26b0:	b7 07       	cpc	r27, r23
    26b2:	10 f0       	brcs	.+4      	; 0x26b8 <__udivmodhi4_ep>
    26b4:	a6 1b       	sub	r26, r22
    26b6:	b7 0b       	sbc	r27, r23

000026b8 <__udivmodhi4_ep>:
    26b8:	88 1f       	adc	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	5a 95       	dec	r21
    26be:	a9 f7       	brne	.-22     	; 0x26aa <__udivmodhi4_loop>
    26c0:	80 95       	com	r24
    26c2:	90 95       	com	r25
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
    26c8:	08 95       	ret

000026ca <__prologue_saves__>:
    26ca:	2f 92       	push	r2
    26cc:	3f 92       	push	r3
    26ce:	4f 92       	push	r4
    26d0:	5f 92       	push	r5
    26d2:	6f 92       	push	r6
    26d4:	7f 92       	push	r7
    26d6:	8f 92       	push	r8
    26d8:	9f 92       	push	r9
    26da:	af 92       	push	r10
    26dc:	bf 92       	push	r11
    26de:	cf 92       	push	r12
    26e0:	df 92       	push	r13
    26e2:	ef 92       	push	r14
    26e4:	ff 92       	push	r15
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	ca 1b       	sub	r28, r26
    26f4:	db 0b       	sbc	r29, r27
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	09 94       	ijmp

00002702 <__epilogue_restores__>:
    2702:	2a 88       	ldd	r2, Y+18	; 0x12
    2704:	39 88       	ldd	r3, Y+17	; 0x11
    2706:	48 88       	ldd	r4, Y+16	; 0x10
    2708:	5f 84       	ldd	r5, Y+15	; 0x0f
    270a:	6e 84       	ldd	r6, Y+14	; 0x0e
    270c:	7d 84       	ldd	r7, Y+13	; 0x0d
    270e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2710:	9b 84       	ldd	r9, Y+11	; 0x0b
    2712:	aa 84       	ldd	r10, Y+10	; 0x0a
    2714:	b9 84       	ldd	r11, Y+9	; 0x09
    2716:	c8 84       	ldd	r12, Y+8	; 0x08
    2718:	df 80       	ldd	r13, Y+7	; 0x07
    271a:	ee 80       	ldd	r14, Y+6	; 0x06
    271c:	fd 80       	ldd	r15, Y+5	; 0x05
    271e:	0c 81       	ldd	r16, Y+4	; 0x04
    2720:	1b 81       	ldd	r17, Y+3	; 0x03
    2722:	aa 81       	ldd	r26, Y+2	; 0x02
    2724:	b9 81       	ldd	r27, Y+1	; 0x01
    2726:	ce 0f       	add	r28, r30
    2728:	d1 1d       	adc	r29, r1
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	ed 01       	movw	r28, r26
    2736:	08 95       	ret

00002738 <itoa>:
    2738:	fb 01       	movw	r30, r22
    273a:	9f 01       	movw	r18, r30
    273c:	e8 94       	clt
    273e:	42 30       	cpi	r20, 0x02	; 2
    2740:	bc f0       	brlt	.+46     	; 0x2770 <itoa+0x38>
    2742:	45 32       	cpi	r20, 0x25	; 37
    2744:	ac f4       	brge	.+42     	; 0x2770 <itoa+0x38>
    2746:	4a 30       	cpi	r20, 0x0A	; 10
    2748:	29 f4       	brne	.+10     	; 0x2754 <itoa+0x1c>
    274a:	97 fb       	bst	r25, 7
    274c:	1e f4       	brtc	.+6      	; 0x2754 <itoa+0x1c>
    274e:	90 95       	com	r25
    2750:	81 95       	neg	r24
    2752:	9f 4f       	sbci	r25, 0xFF	; 255
    2754:	64 2f       	mov	r22, r20
    2756:	77 27       	eor	r23, r23
    2758:	a4 df       	rcall	.-184    	; 0x26a2 <__udivmodhi4>
    275a:	80 5d       	subi	r24, 0xD0	; 208
    275c:	8a 33       	cpi	r24, 0x3A	; 58
    275e:	0c f0       	brlt	.+2      	; 0x2762 <itoa+0x2a>
    2760:	89 5d       	subi	r24, 0xD9	; 217
    2762:	81 93       	st	Z+, r24
    2764:	cb 01       	movw	r24, r22
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	a9 f7       	brne	.-22     	; 0x2754 <itoa+0x1c>
    276a:	16 f4       	brtc	.+4      	; 0x2770 <itoa+0x38>
    276c:	5d e2       	ldi	r21, 0x2D	; 45
    276e:	51 93       	st	Z+, r21
    2770:	10 82       	st	Z, r1
    2772:	c9 01       	movw	r24, r18
    2774:	00 c0       	rjmp	.+0      	; 0x2776 <strrev>

00002776 <strrev>:
    2776:	dc 01       	movw	r26, r24
    2778:	fc 01       	movw	r30, r24
    277a:	67 2f       	mov	r22, r23
    277c:	71 91       	ld	r23, Z+
    277e:	77 23       	and	r23, r23
    2780:	e1 f7       	brne	.-8      	; 0x277a <strrev+0x4>
    2782:	32 97       	sbiw	r30, 0x02	; 2
    2784:	04 c0       	rjmp	.+8      	; 0x278e <strrev+0x18>
    2786:	7c 91       	ld	r23, X
    2788:	6d 93       	st	X+, r22
    278a:	70 83       	st	Z, r23
    278c:	62 91       	ld	r22, -Z
    278e:	ae 17       	cp	r26, r30
    2790:	bf 07       	cpc	r27, r31
    2792:	c8 f3       	brcs	.-14     	; 0x2786 <strrev+0x10>
    2794:	08 95       	ret

00002796 <_exit>:
    2796:	f8 94       	cli

00002798 <__stop_program>:
    2798:	ff cf       	rjmp	.-2      	; 0x2798 <__stop_program>
